@using AasxServerBlazor.TreeVisualisation
@using AasxServerBlazor.TreeVisualisation.Builders
@using AasxServer
@using AasSecurity
@inject ISecurityService SecService
@namespace AasxServerBlazor.Pages.TreeNodeComponents

@code {
    [Parameter] public TreeItem SelectedNode { get; set; }

    private string SelectedNodeInfoType => SelectedNode?.Tag is not string ? SelectedNode.BuildNodeRepresentation() : null;

    private string SelectedNodeInfoId => SelectedNode?.GetIdentifier();

    private bool IsTextContainingReadme => SelectedNode?.Text.Contains("/readme") ?? false;

    private string ReadFileContent(string filePath)
    {
        if (filePath == null || !IsTextContainingReadme)
            return null;

        var text = System.IO.File.ReadAllText(filePath);
        return text.Replace("%BLAZOR%", Program.externalBlazor);
    }

    private MarkupString GetAccessRulesMarkupString()
    {
        if (!IsTextContainingReadme)
            return new MarkupString(string.Empty);

        var accessRules = SecService.GetSecurityRules();
        var lines = accessRules.Split('\n');
        var tableRows = lines.Select(CreateTableRow);

        const string tableHeader = "<thead><tr><th>Name</th><th nowrap>Kind</th><th>Permission</th><th>Type</th><th>API</th><th>Path</th><th>SemanticID</th><th>See</th></tr></thead>";
        return new MarkupString($"<table class='table table-bordered table-sm'><tbody>{tableHeader}{string.Join("", tableRows)}</tbody></table>");
    }

    string CreateTableCell(string col, int index)
    {
        var nowrapAttribute = (index == 1 || index == 2)
            ? " nowrap"
            : string.Empty;
        return $"<td{nowrapAttribute}>{col}</td>";
    }

    string CreateTableRow(string line)
    {
        var columns = line.Split('\t');
        var tableCells = columns.Select(CreateTableCell);
        return $"<tr>{string.Concat(tableCells)}</tr>";
    }

    private string GetNodeDetails(int line, int column)
    {
        var nodeBuilder = TreeDetailsBuilderFactory.Create(SelectedNode);
        var nodeDetails = nodeBuilder.Build(SelectedNode, line, column);
        return string.IsNullOrWhiteSpace(nodeDetails) ? null : nodeDetails;
    }

}

<div class="node-element-container" id="tree-item-representation-component">
    <h2 class="tree-item-details-header">Selected Tree Node</h2>
    @if (SelectedNode != null)
    {
        @if (!string.IsNullOrWhiteSpace(SelectedNodeInfoType))
        {
            <span class="tree-node-type-info" id="SelectedNodeInfoType">@SelectedNodeInfoType</span>
            <span id="SelectedNodeInfoId">@SelectedNodeInfoId</span>
        }
        else if (IsTextContainingReadme)
        {
            var text = ReadFileContent(SelectedNode.Text);
            @if (!string.IsNullOrWhiteSpace(text))
            {
                if (text.Contains("%ACCESSRULES%"))
                {
                    <div>@GetAccessRulesMarkupString()</div>
                }
                else
                {
                    <span>@((MarkupString) text)</span>
                }
            }
        }
    }
    else
    {
        <h3 class="tree-item-details-sub-header">No item selected</h3>
        <span>If you want to see some detail information, please select a Tree item on the left side.</span>
    }

    @for (var line = 0; line < 20; line++)
    {
        var nodeDetailsFirstColumn = GetNodeDetails(line, 0);
        var nodeDetailsSecondColumn = GetNodeDetails(line, 1);
        var nodeDetailsThirdColumn = GetNodeDetails(line, 2);

        if (!string.IsNullOrWhiteSpace(nodeDetailsFirstColumn) && !string.IsNullOrWhiteSpace(nodeDetailsSecondColumn))
        {
            var leftClass = $"details-left-{line}";
            var rightClass = $"details-right-{line}";
            <div class="tree-item-details-container">
                <span class="tree-node-type-info @leftClass">@nodeDetailsFirstColumn</span>
                <span class="@rightClass">@nodeDetailsSecondColumn @nodeDetailsThirdColumn</span>
            </div>
        }
    }
</div>