@using AasxServerBlazor.TreeVisualisation
@using Microsoft.IdentityModel.Tokens
@using AasxServer
@namespace AasxServerBlazor.Pages.TreeNodeComponents

<div class="node-element-container" id="url-path-container">
    @if (!string.IsNullOrEmpty(SubmodelUrlPath(SelectedNode)))
    {
        <div class="url-section">
            <span class="tree-node-type-info">URL:</span>
            <a href="@SubmodelUrlPath(SelectedNode)" target="_blank">@SubmodelUrlPath(SelectedNode)</a>
        </div>
    }

    @if (!string.IsNullOrEmpty(SubmodelElementUrlPath(SelectedNode)))
    {
        <div class="url-section">
            <span class="tree-node-type-info">URL:</span>
            <a href="@SubmodelElementUrlPath(SelectedNode)" target="_blank">@SubmodelElementUrlPath(SelectedNode)</a>
        </div>
    }
</div>

@code {
    [Parameter] public TreeItem SelectedNode { get; set; }

    private string SubmodelUrlPath(TreeItem node)
    {
        if (node?.Tag is not Submodel submodel)
        {
            return null;
        }

        var idEncoded = Base64UrlEncoder.Encode(submodel.Id);
        return $"{Program.externalBlazor}/submodels/{idEncoded}";
    }

    private string SubmodelElementUrlPath(TreeItem node)
    {
        if (node?.Tag is not ISubmodelElement submodelElement)
            return null;

        var path = GetSubmodelElementPath(submodelElement);
        var submodelIdEncoded = GetSubmodelIdEncoded(submodelElement);
        return $"{Program.externalBlazor}/submodels/{submodelIdEncoded}/submodel-elements/{path}";
    }

    private string GetSubmodelElementPath(ISubmodelElement element)
    {
        var path = element.IdShort;
        var parent = element.Parent as IReferable;

        while (parent != null && parent is not Submodel)
        {
            if (parent is ISubmodelElementList parentList)
            {
                path = GetPathFromElementList(parentList, element, path);
            }
            else if (parent.Parent is ISubmodelElementList prevParentList)
            {
                path = GetPathFromPreviousElementList(prevParentList, parent as ISubmodelElement, path);
            }
            else
            {
                return null; // Cannot determine parent hierarchy
            }

            parent = parent.Parent as IReferable;
        }

        return path;
    }

    private string GetPathFromElementList(ISubmodelElementList parentList, ISubmodelElement element, string currentPath)
    {
        if (currentPath == null || !currentPath.Equals(element.IdShort))
        {
            return $"{parentList.IdShort}.{currentPath}";
        }

        var index = parentList.Value?.IndexOf(element);
        return $"[{index}]";
    }

    private string GetPathFromPreviousElementList(ISubmodelElementList prevParentList, ISubmodelElement parentElement, string currentPath)
    {
        var index = prevParentList.Value?.IndexOf(parentElement);
        return $"[{index}].{currentPath}";
    }

    private string GetSubmodelIdEncoded(ISubmodelElement element)
    {
        var parent = element.Parent as IReferable;
        while (parent != null && parent is not Submodel)
        {
            parent = (IReferable) parent.Parent;
        }

        return parent is Submodel submodel ? Base64UrlEncoder.Encode(submodel.Id) : null;
    }

}
