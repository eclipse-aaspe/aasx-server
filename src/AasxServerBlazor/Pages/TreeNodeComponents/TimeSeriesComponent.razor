@using AasxServerBlazor.TreeVisualisation
@using Extensions
@using AasxServerBlazor.Data
@using AasxServerBlazor.DateTimeServices
@using AasxServerStandardBib
@using static AasxServerStandardBib.TimeSeriesPlotting
@namespace AasxServerBlazor.Pages.TreeNodeComponents

@inject BlazorSessionService BlazorSessionService;

@code {
    [Parameter] public TreeItem SelectedNode { get; set; }

    DateTime _timeStampPlot;
    SubmodelElementCollection _collectionPlot;
    System.Diagnostics.Stopwatch _watchTimeToProcessImage = new();
    ListOfTimeSeriesData _timeSeriesData = new();
    PlotFilter _plotFilter = new(new SystemDateTimeProvider());
    int _plotFilterTsdOffset;
    bool _showImageModal;
    private const string TimeFormat = "yy-MM-dd HH:mm:ss.fff";
    private const string HttpsAdminShellIoSandboxZveiTimeseriesdataTimeseries = "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeries/1/0";
    private const string HttpsAdminShellIoSandboxZveiTimeseriesdataTimeseriessegment = "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0";
}

@if (SelectedNode != null && SelectedNode.Tag is SubmodelElementCollection submodelElementCollection)
{
    var semanticId = submodelElementCollection.SemanticId?.GetAsIdentifier();

    if (semanticId != null && (semanticId.Equals(HttpsAdminShellIoSandboxZveiTimeseriesdataTimeseries) ||
                               semanticId.Equals(HttpsAdminShellIoSandboxZveiTimeseriesdataTimeseriessegment)))
    {
        var submodelElementTimeDifference = submodelElementCollection.TimeStamp - _timeStampPlot;

        if (ShouldUpdatePlot(submodelElementCollection, submodelElementTimeDifference))
        {
            UpdatePlot(submodelElementCollection);
        }

        RenderTimeSeriesImage();
    }
    else
    {
        _collectionPlot = null;
    }
}

@code {

    private bool ShouldUpdatePlot(SubmodelElementCollection submodelElementCollection, TimeSpan submodelElementTimeDifference)
    {
        return submodelElementCollection != _collectionPlot || submodelElementTimeDifference.TotalSeconds < 0 || submodelElementTimeDifference.TotalSeconds >= 5;
    }

    private void UpdatePlot(SubmodelElementCollection submodelElementCollection)
    {
        _watchTimeToProcessImage = System.Diagnostics.Stopwatch.StartNew();

        _collectionPlot = submodelElementCollection;
        _timeStampPlot = submodelElementCollection.TimeStampTree;

        _timeSeriesData.Clear();
        InitializeTimeSeriesData(submodelElementCollection);
        _timeSeriesData?.RenderTimeSeries(defPlotHeight: 200, "en", BlazorSessionService.sessionNumber, _plotFilter.CombinedStartDateTime, _plotFilter.CombinedEndDateTime);
        _watchTimeToProcessImage.Stop();
    }

    private void InitializeTimeSeriesData(SubmodelElementCollection submodelElementCollection)
    {
        var timeSeriesData = new TimeSeriesData() {SourceTimeSeries = submodelElementCollection};
        _timeSeriesData.Add(timeSeriesData);
        timeSeriesData.Args = PlotArguments.Parse(submodelElementCollection.FindQualifierOfType("TimeSeries.Args")?.Value);

        var timeSeriesDataV10 = ZveiTimeSeriesDataV10.Static;

        if (submodelElementCollection.SemanticId?.GetAsIdentifier() == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
        {
            TimeSeriesAddSegmentData(timeSeriesDataV10, timeSeriesData, submodelElementCollection);
        }
        else
        {
            var timeSeriesReferenceKey = new Key(KeyTypes.ConceptDescription, "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0");
            var submodelEventValues = submodelElementCollection.Value.FindAllSemanticIdAs<SubmodelElementCollection>(timeSeriesReferenceKey, MatchMode.Relaxed);
            foreach (var submodelCollectionItem in submodelEventValues)
            {
                TimeSeriesAddSegmentData(timeSeriesDataV10, timeSeriesData, submodelCollectionItem);
            }
        }
    }

    private void RenderTimeSeriesImage()
    {
        var timeSeriesImageBase64 = string.Empty;
        var scottplotImgPath = "wwwroot/images/scottplot/smc_timeseries_clientid" + BlazorSessionService.sessionNumber + ".png";

        if (System.IO.File.Exists(scottplotImgPath))
        {
            var imageArray = System.IO.File.ReadAllBytes(scottplotImgPath);
            timeSeriesImageBase64 = Convert.ToBase64String(imageArray);
        }

        var elapsedMsToProcessImage = _watchTimeToProcessImage.ElapsedMilliseconds;

        if (System.IO.File.Exists(scottplotImgPath))
        {
            <TimeSeriesImageDisplay TimeSeriesImageBase64="@timeSeriesImageBase64"
                                    ElapsedMsToProcessImage="@elapsedMsToProcessImage"
                                    TimeStampPlot="@_timeStampPlot"
                                    PlotFilter="_plotFilter"
                                    PlotFilterTsdOffset="_plotFilterTsdOffset"
                                    OnFilterApplied="() => { _showImageModal = !_showImageModal; }" />
        }
        else
        {
            <div class="my-2">Rendering time series...</div>
        }
    }

}
