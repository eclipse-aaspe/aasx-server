@using AasxServerBlazor.TreeVisualisation
@using Extensions
@using AasxServerBlazor.Data
@using AasxServerBlazor.DateTimeServices
@using AasxServerStandardBib
@using static AasxServerStandardBib.TimeSeriesPlotting;
@namespace AasxServerBlazor.Pages.TreeNodeComponents

@inject BlazorSessionService BlazorSessionService;

@code {
    [Parameter] public TreeItem SelectedNode { get; set; }

    DateTime _timeStampPlot;

    SubmodelElementCollection _collectionPlot;
    System.Diagnostics.Stopwatch _watchTimeToProcessImage = new();
    ListOfTimeSeriesData _timeSeriesData = new();
    PlotFilter _plotFilter = new(new SystemDateTimeProvider());
    int _plotFilterTsdOffset;
    bool _showImageModal;

    private const string TimeFormat = "yy-MM-dd HH:mm:ss.fff";
}

@if (SelectedNode is {Tag: SubmodelElementCollection submodelElementCollection})
{
    var semanticId = string.Empty;

    try
    {
        semanticId = submodelElementCollection.SemanticId?.GetAsIdentifier();
    }
    catch (Exception exception)
    {
        Console.WriteLine($"Error for {nameof(SelectedNode)} as {nameof(submodelElementCollection)} in {nameof(TreeNodeDetailsContainer)}: {exception.Message}");
    }

    if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeries/1/0" ||
        semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
    {
        var submodelElementTimeDifference = submodelElementCollection.TimeStamp - _timeStampPlot;

        if (submodelElementCollection != _collectionPlot || submodelElementTimeDifference.TotalSeconds < 0 || submodelElementTimeDifference.TotalSeconds >= 5)
        {
            _watchTimeToProcessImage = System.Diagnostics.Stopwatch.StartNew();

            _collectionPlot = submodelElementCollection;
            _timeStampPlot = submodelElementCollection.TimeStampTree;

            _timeSeriesData.Clear();

            // make initial data for time series
            var timeSeriesData = new TimeSeriesPlotting.TimeSeriesData() {SourceTimeSeries = submodelElementCollection};
            _timeSeriesData.Add(timeSeriesData);

            // plot arguments for time series
            timeSeriesData.Args = TimeSeriesPlotting.PlotArguments.Parse(submodelElementCollection.FindQualifierOfType("TimeSeries.Args")?.Value);

            // TODO: info - ZveiTimeSeriesDataV10 is currently hardcoded as JSON string in code
            var timeSeriesDataV10 = TimeSeriesPlotting.ZveiTimeSeriesDataV10.Static;

            var timeSeriesReferenceKey = new Key(KeyTypes.ConceptDescription, "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0");

            // is it a segment
            if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
            {
                TimeSeriesAddSegmentData(timeSeriesDataV10, timeSeriesData, submodelElementCollection);
            }
            else
            {
                // search for segements on current level
                var submodelEventValues = submodelElementCollection.Value.FindAllSemanticIdAs<SubmodelElementCollection>(timeSeriesReferenceKey, MatchMode.Relaxed);

                var submodelElementCollections = submodelEventValues.ToList();
                if (submodelElementCollections.Count() != 0)
                {
                    foreach (var submodelCollectionItem in submodelElementCollections)
                    {
                        TimeSeriesAddSegmentData(timeSeriesDataV10, timeSeriesData, submodelCollectionItem);
                    }
                }
            }

            _timeSeriesData?.RenderTimeSeries(defPlotHeight: 200, "en", BlazorSessionService.sessionNumber, _plotFilter.CombinedStartDateTime, _plotFilter.CombinedEndDateTime);
            _watchTimeToProcessImage.Stop();
        }

        var timeSeriesImageBase64 = string.Empty;
        var scottplotImgPath = "wwwroot/images/scottplot/smc_timeseries_clientid" + BlazorSessionService.sessionNumber + ".png";

        if (System.IO.File.Exists(scottplotImgPath))
        {
            var imageArray = System.IO.File.ReadAllBytes(scottplotImgPath);
            timeSeriesImageBase64 = Convert.ToBase64String(imageArray);
        }

        var elapsedMsToProcessImage = _watchTimeToProcessImage.ElapsedMilliseconds;

        if (System.IO.File.Exists(scottplotImgPath))
        {
            <AasxServerBlazor.Pages.TreeNodeComponents.TimeSeriesImageComponent ImageBase64="@timeSeriesImageBase64" ShowModal="_showImageModal" TimeStampPlot="_timeStampPlot" ElapsedMsToProcessImage="elapsedMsToProcessImage" />
        }
        else
        {
            <div class="my-2">Rendering time series...</div>
        }
    }
    else
    {
        _collectionPlot = null;
    }
}
