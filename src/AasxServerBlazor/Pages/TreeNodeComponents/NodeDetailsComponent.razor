@using Extensions
@using Microsoft.IdentityModel.Tokens
@using AasxServer
@using AasxServerBlazor.TreeVisualisation
@using AasxServerBlazor.TreeVisualisation.Builders
@using AasxServerStandardBib
@using AasxServerBlazor.Data
@using AasxServerBlazor.DateTimeServices
@inject ISecurityService SecService
@using static AasxServerStandardBib.TimeSeriesPlotting;
@using AasSecurity

@namespace TreeNodeComponents

<style>
.modal-fullscreen {
  padding: 0 !important;
}
.modal-fullscreen .modal-dialog {
  width: 100%;
  max-width: none;
  height: 100%;
  margin: 0;
}
.modal-fullscreen .modal-content {
  height: 100%;
  border: 0;
  border-radius: 0;
}
.modal-fullscreen .modal-body {
  overflow-y: auto;
}

</style>
<div class="sticky-top" style="word-wrap:break-word;word-break:break-all;">
    @{
        if (SelectedNode != null)
        {
            if (SelectedNode.Tag is not string)
            {
                <span style="color:white;background-color:blue;" id="SelectedNodeInfoType">@SelectedNode.BuildNodeRepresentation()</span>
                <span id="SelectedNodeInfoId">@SelectedNode.GetIdentifier()</span>
                <br>
            }
            else
            {
                if (SelectedNode.Text.Contains("/readme"))
                {
                    var text = System.IO.File.ReadAllText(SelectedNode.Text);
                    text = text.Replace("%BLAZOR%", Program.externalBlazor);
                    if (text.Contains("%ACCESSRULES%"))
                    {
                        var accessRules = SecService.GetSecurityRules();
                        <table class="table table-bordered table-sm">
                            <thead>
                            <tr>
                                <th>Name</th>
                                <th nowrap>Kind</th>
                                <th>Permission</th>
                                <th>Type</th>
                                <th>API</th>
                                <th>Path</th>
                                <th>SemanticID</th>
                                <th>See</th>
                            </tr>
                            </thead>
                            <tbody>
                            @{
                                var lines = accessRules.Split('\n');
                                foreach (var line in lines)
                                {
                                    <tr>
                                        @{
                                            var columns = line.Split('\t');
                                            for (var column = 0; column < columns.Count(); column++)
                                            {
                                                if (column != 1 && column != 2)
                                                {
                                                    <td>@columns[column]</td>
                                                }
                                                else
                                                {
                                                    <td nowrap>@columns[column]</td>
                                                }
                                            }
                                        }
                                    </tr>
                                }
                            }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <span>@((MarkupString) text)</span>
                    }
                }
            }
        }

        var nodeBuilder = TreeDetailsBuilderFactory.Create(SelectedNode);
        for (var line = 0; line < 20; line++)
        {
            var nodeDetailsFirstColumn = nodeBuilder.Build(SelectedNode, line, 0);
            var nodeDetailsSecondColumn = nodeBuilder.Build(SelectedNode, line, 1);
            var nodeDetailsThirdColumn = nodeBuilder.Build(SelectedNode, line, 2);
            if (nodeDetailsFirstColumn != string.Empty && nodeDetailsSecondColumn != string.Empty)
            {
                var detailsId = "SelectedNodeDetailsLeft_" + line;
                <span style="color:white;background-color:blue;" id="@detailsId">@nodeDetailsFirstColumn</span>
                detailsId = "SelectedNodeDetailsRight_" + line;
                <span id="@detailsId">@nodeDetailsSecondColumn @nodeDetailsThirdColumn</span>
                <br>
            }
        }

        if (SelectedNode != null && SelectedNode.Tag is IReferable r)
        {
            <span style="color:lightgray;">UPDATE @r.TimeStamp.ToString(TimeFormat)</span>
            <br/>
            <button style="border-width: 1px; border-color: black; background-color: lightgray" @onclick="SetTimeStamp">TIMESTAMP</button>
            <br/>
            <span style="color:lightgray;">CREATE @r.TimeStampCreate.ToString(TimeFormat)</span>
            <br/>
            <span style="color:lightgray;">TREE @r.TimeStampTree.ToString(TimeFormat)</span>

            <br/>
                    @code {

                        private void SetTimeStamp()
                        {
                            (SelectedNode.Tag as IReferable).SetTimeStamp(DateTime.UtcNow);
                            Program.env[SelectedNode.EnvironmentIndex].setWrite(true);
                        }

                    }
                }

        //var link = AasxItemLinkService.Create(SelectedNode, NavigationManager.Uri, out externalLink); TODO: fix this before PR
        const string link = "https://example.com";
        if (SelectedNode != null && link != string.Empty)
        {
            if (true)
            {
                <a href="@link" target="_blank">@link</a>
                <br>
            }
            else
            {
                <button onclick="window.location.href = '@link'; ">Download</button>
                <br>
            }

            if (SelectedNode != null && SelectedNode.Tag is Submodel && Program.connectServer != string.Empty)
            {
                var toPublish = Program.submodelsToPublish.Contains(SelectedNode.Tag);
                var toSubscribe = Program.submodelsToSubscribe.Contains(SelectedNode.Tag);
                if (toPublish)
                {
                    <button style="color:white;background-color:blue" @onclick="ResetSubmodelToPublish">Publish</button>
                }
                else
                {
                    <button @onclick="SetSubmodelToPublish">Publish</button>
                }

                if (toSubscribe)
                {
                    <button style="color:white;background-color:blue" @onclick="ResetSubmodelToSubscribe">Subscribe</button>
                }
                else
                {
                    <button @onclick="SetSubmodelToSubscribe">Subscribe</button>
                }
                        @code {

                            private void ResetSubmodelToPublish()
                            {
                                Program.submodelsToPublish.Remove(SelectedNode.Tag);
                            }

                            private void SetSubmodelToPublish()
                            {
                                var toSubscribe = Program.submodelsToSubscribe.Contains(SelectedNode.Tag);
                                if (!toSubscribe)
                                    Program.submodelsToPublish.Add(SelectedNode.Tag);
                            }

                            private void ResetSubmodelToSubscribe()
                            {
                                Program.submodelsToSubscribe.Remove(SelectedNode.Tag);
                            }

                            private void SetSubmodelToSubscribe()
                            {
                                var toPublish = Program.submodelsToPublish.Contains(SelectedNode.Tag);
                                if (!toPublish)
                                    Program.submodelsToSubscribe.Add(SelectedNode.Tag);
                            }

                        }
                    }
        }

        if (SelectedNode != null && SelectedNode.Tag is Property && Program.edit)
        {
            <input @bind="CurrentValue" style="width:500px; border-width: 1px; border-color: black;"/>
            <span style="border-width: 1px; border-color: black; background-color: blue;">@CurrentValue</span>
            <br>
                    @code { private string CurrentValue { get; set; } }
                    if (CurrentValue != null && CurrentValue != "")
            {
                if (SelectedNode.Tag is Property property)
                {
                    if (string.IsNullOrEmpty(CurrentValue))
                    {
                        CurrentValue = string.Empty;
                    }
                    property.Value = CurrentValue;
                    property.SetTimeStamp(DateTime.UtcNow);
                    Program.env[SelectedNode.EnvironmentIndex].setWrite(true);
                    Program.signalNewData(0);
                }

                CurrentValue =  string.Empty;
            }
        }

        if (SelectedNode != null && SelectedNode.Tag is (AssetAdministrationShell or File) and AssetAdministrationShell)@code {

                            private void RunCreateQrCodeImage()
                            {
                                var qrCodeService = new QrCodeService();
                                qrCodeService.CreateQrCodeImage(SelectedNode);
                            }

                        }
        {
            <button style="border-width: 1px; border-color: black; color: white; background-color: blue" @onclick="RunCreateQrCodeImage">QRCODE</button>
            <br/>
            var qrCodeService = new QrCodeService();
            var qrcodeLink = QrCodeService.GetQrCodeLink(SelectedNode);
            if (Program.generatedQrCodes.ContainsKey(SelectedNode.Tag))
            {
                var qrcodeImage = QrCodeService.GetQrCodeImage(SelectedNode);
                if (qrcodeImage != "")
                {
                    <a href="@qrcodeLink" target="_blank">
                        <div>
                            <img src=data:image;base64,@qrcodeImage style="max-width: 25%;" alt="Qrcode Image"/>
                        </div>
                    </a>
                }
            }
            else
            {
                <a href="@qrcodeLink" target="_blank">@qrcodeLink</a>
                @:<br>
            }
                        

        }

        if (SelectedNode != null && SelectedNode.Tag is Submodel submodel)
        {
            var idEncoded = Base64UrlEncoder.Encode(submodel.Id);
            var path = Program.externalBlazor + "/submodels/" + idEncoded;
            <span style="color:white;background-color:blue;">URL:</span>
            <a href="@path" target="_blank">@path</a>
            <br>
        }

        if (SelectedNode != null && SelectedNode.Tag is ISubmodelElement submodelElement)
        {
            var path = submodelElement.IdShort;
            var parent = submodelElement.Parent as IReferable;
            while (parent is not Submodel)
            {
                if (parent is ISubmodelElementList parentList)
                {
                    if (path.Equals(submodelElement.IdShort))
                    {
                        var index = parentList.Value?.IndexOf(submodelElement);
                        path = "[" + index + "]";
                    }

                    path = parentList.IdShort + path;
                }
                else if (parent.Parent is ISubmodelElementList prevParentList)
                {
                    var index = prevParentList.Value?.IndexOf(parent as ISubmodelElement);
                    path = "[" + index + "]" + "." + path;
                }
                else
                {
                    path = parent.IdShort + "." + path;
                }

                parent = (IReferable) parent.Parent;
            }

            var idEncoded = Base64UrlEncoder.Encode((parent as Submodel).Id);
            path = Program.externalBlazor + "/submodels/" + idEncoded + "/submodel-elements/" + path;
            <span style="color:white;background-color:blue;">URL:</span>
            <a href="@path" target="_blank">@path</a>
            <br>
        }

        if (SelectedNode is {Tag: SubmodelElementCollection submodelElementCollection})
        {
            var semanticId = string.Empty;

            try
            {
                semanticId = submodelElementCollection.SemanticId?.GetAsIdentifier();
            }
            catch (Exception exception)
            {
                Console.WriteLine($"Error for {nameof(SelectedNode)} as {nameof(submodelElementCollection)} in {nameof(NodeDetailsComponent)}: {exception.Message}");
            }

            if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeries/1/0" ||
                semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
            {
                var submodelElementTimeDifference = submodelElementCollection.TimeStamp - _timeStampPlot;

                if (submodelElementCollection != _collectionPlot || submodelElementTimeDifference.TotalSeconds < 0 || submodelElementTimeDifference.TotalSeconds >= 5)
                {
                    _watchTimeToProcessImage = System.Diagnostics.Stopwatch.StartNew();

                    _collectionPlot = submodelElementCollection;
                    _timeStampPlot = submodelElementCollection.TimeStampTree;

                    _timeSeriesData.Clear();

                    // make initial data for time series
                    var timeSeriesData = new TimeSeriesData() {SourceTimeSeries = submodelElementCollection};
                    _timeSeriesData.Add(timeSeriesData);

                    // plot arguments for time series
                    timeSeriesData.Args = PlotArguments.Parse(submodelElementCollection.FindQualifierOfType("TimeSeries.Args")?.Value);

                    // TODO: info - ZveiTimeSeriesDataV10 is currently hardcoded as JSON string in code
                    var timeSeriesDataV10 = ZveiTimeSeriesDataV10.Static;

                    var timeSeriesReferenceKey = new Key(KeyTypes.ConceptDescription, "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0");

                    // is it a segment
                    if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
                    {
                        TimeSeriesAddSegmentData(timeSeriesDataV10, timeSeriesData, submodelElementCollection);
                    }
                    else
                    {
                        // search for segements on current level
                        var submodelEventValues = submodelElementCollection.Value.FindAllSemanticIdAs<SubmodelElementCollection>(timeSeriesReferenceKey, MatchMode.Relaxed);

                        var submodelElementCollections = submodelEventValues.ToList();
                        if (submodelElementCollections.Count() != 0)
                        {
                            foreach (var submodelCollectionItem in submodelElementCollections)
                            {
                                TimeSeriesAddSegmentData(timeSeriesDataV10, timeSeriesData, submodelCollectionItem);
                            }
                        }
                    }

                    _timeSeriesData?.RenderTimeSeries(defPlotHeight: 200, "en", BlazorSessionService.sessionNumber, _plotFilter.CombinedStartDateTime, _plotFilter.CombinedEndDateTime);
                    _watchTimeToProcessImage.Stop();
                }

                var timeSeriesImageBase64 = string.Empty;
                var scottplotImgPath = "wwwroot/images/scottplot/smc_timeseries_clientid" + BlazorSessionService.sessionNumber + ".png";

                if (System.IO.File.Exists(scottplotImgPath))
                {
                    var imageArray = System.IO.File.ReadAllBytes(scottplotImgPath);
                    timeSeriesImageBase64 = Convert.ToBase64String(imageArray);
                }

                var elapsedMsToProcessImage = _watchTimeToProcessImage.ElapsedMilliseconds;

                if (System.IO.File.Exists(scottplotImgPath))
                {
                    <EditForm Model="@_plotFilter" OnValidSubmit="() => _plotFilter.ApplyFilterToTimeSeriesData(_timeSeriesData, BlazorSessionService.sessionNumber)">
                        <label for="filterFromDate">Filter from</label>
                        <InputDate id="filterFromDate" @bind-Value="_plotFilter.StartDate"/>
                        <input type="time" @bind-value="_plotFilter.StartTime"/>
                        <label for="filterToDate">Filter to</label>
                        <InputDate id="filterToDate" @bind-Value="_plotFilter.EndDate"/>
                        <input type="time" @bind-value="_plotFilter.EndTime"/>
                        <div>
                            <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                    type="submit">
                                Apply
                            </button>
                            <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                    @onclick="_plotFilter.SetInitialFilterState">
                                Reset
                            </button>
                            <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                    @onclick="() => { _plotFilterTsdOffset = 0; _plotFilter.SetFilterStateForDay(0); }">
                                Today
                            </button>
                            <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                    @onclick="() => { _plotFilterTsdOffset = -1; _plotFilter.SetFilterStateForDay(-1); }">
                                Yesterday
                            </button>
                            <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                    @onclick="() => _plotFilter.SetFilterStateForDay(--_plotFilterTsdOffset)">
                                Prev day
                            </button>
                            <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                    @onclick="() => _plotFilter.SetFilterStateForDay(++_plotFilterTsdOffset)">
                                Next day
                            </button>
                        </div>
                    </EditForm>

                    <div class="d-flex flex-column">
                        <img @onclick="() => _showImageModal = !_showImageModal" src=data:image;base64,@timeSeriesImageBase64 alt="Visualization of time series" style="max-width:950px;cursor:zoom-in;"/>
                        <span class="text-muted" style="font-size:14px;">
                            Image processing took @elapsedMsToProcessImage ms (Last update: @_timeStampPlot.ToString(TimeFormat))
                        </span>
                    </div>

                    <div class="modal modal-fullscreen @(_showImageModal ? " d-block" : "d-none")" style="margin-top:3.5rem;" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Visualization of time series</h5>
                                    <button type="button" @onclick="() => _showImageModal = !_showImageModal" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body text-center">
                                    <img @onclick="() => _showImageModal = !_showImageModal" src=data:image;base64,@timeSeriesImageBase64 alt="Visualization of time series" style="max-width:90%;max-height:90%;cursor:zoom-out;" class="mb-2"/>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="my-2">Rendering time series...</div>
                }
            }
            else
            {
                _collectionPlot = null;
            }
        }
    }

    @{
        var detailsImage = ImageBuilder.CreateDetailsImage(SelectedNode, out var url, out var svg);
        if (!string.IsNullOrEmpty(detailsImage))
        {
            if (!svg)
            {
                if (!url)
                {
                    <br/>
                    <div>
                        <img src=data:image;base64,@detailsImage style="max-width: 50%" alt="Details Image"/>
                    </div>
                }
                else
                {
                    <br/>
                    <div>
                        <img src="@detailsImage" style="max-width: 50%" alt="Details Image"/>
                    </div>
                }
            }
            else
            {
                if (!url)
                {
                    <br/>
                    <div>
                        <img src=data:image/svg+xml;base64,@detailsImage style="max-width: 50%" alt="Details Image"/>
                    </div>
                }
                else
                {
                    <br/>
                    <div>
                        <img src="detailsImage" style="max-width: 50%" alt="Details Image"/>
                    </div>
                }
            }
        }

        if (SelectedNode is {Tag: BasicEventElement {Observed: not null} basicEventElement})
        {
            var observedEventElementKey = basicEventElement.Observed.GetAsExactlyOneKey().ToStringExtended();
            <span style="color:white;background-color:blue;">Observed</span>
            <span>@(" " + observedEventElementKey)</span>
            <br/>
            var referableEventOfAasEnvironment = Program.env[0].AasEnv.FindReferableByReference(basicEventElement.Observed);
            if (referableEventOfAasEnvironment != null)
            {
                <span style="color:lightgray;">UPDATE @referableEventOfAasEnvironment.TimeStamp.ToString(TimeFormat)</span>
                <br/>
                <span style="color:lightgray;">CREATE @referableEventOfAasEnvironment.TimeStampCreate.ToString(TimeFormat)</span>
                <br/>
            }
            else
            {
                <span>Referenced element does not exist!</span>
                <br/>
            }
        }
    }

@inject BlazorSessionService BlazorSessionService;
    @code {
        [Parameter] public TreeItem SelectedNode { get; set; }
        
        DateTime _timeStampPlot = new();
        SubmodelElementCollection _collectionPlot = null;
        System.Diagnostics.Stopwatch _watchTimeToProcessImage = new();
        ListOfTimeSeriesData _timeSeriesData = new();
        PlotFilter _plotFilter = new(new SystemDateTimeProvider());
        bool _showImageModal = false;
        int _plotFilterTsdOffset = 0;
        private const string TimeFormat = "yy-MM-dd HH:mm:ss.fff";
    }

</div>