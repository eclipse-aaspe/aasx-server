
@using Microsoft.AspNetCore.Components.Web
@using AasxServerBlazor.Data

@typeparam TNode
@using static AdminShellNS.AdminShellV20;
@using static TreePage

<div class="uic-tree @(Visible ? "" : "uic-tree--hidden")">
    @foreach (var node in Nodes ?? Enumerable.Empty<TNode>())
    {
        bool nodeExpanded = ExpandedNodes.Contains(node);
        bool nodeSelected = node.Equals(SelectedNode);
        bool hasChildren = HasChildNodes(node);

        <div>
            @if (hasChildren)
            {
                <span class="uic-tree__icon" @onclick="@(() => OnToggleNode(node, !nodeExpanded))">
                    <i class="@(nodeExpanded? Style.CollapseNodeIconClass : Style.ExpandNodeIconClass)"/>
                </span>
            }

            <div class="uic-tree__title">
                <span class="@Style.NodeTitleClass @(nodeSelected ? Style.NodeTitleSelectedClass : "")" @onclick="@(() => OnSelectNode(node))">
                    @TitleTemplate(node)
                </span>
            </div>

            @if (hasChildren && nodeExpanded)
			{
                <TreeNode Nodes="ChildSelector(node)"
                    TitleTemplate="TitleTemplate"
                    ChildSelector="ChildSelector"
                    ExpandedNodes="ExpandedNodes"
                    ExpandedNodesChanged="ExpandedNodesChanged"
                    SelectedNode="SelectedNode"
                    SelectedNodeChanged="SelectedNodeChanged"
                    Visible="nodeExpanded"
                    HasChildNodes="HasChildNodes" />
            }
        </div>
    }
</div>

@code {

    [Parameter]
    public IEnumerable<TNode> Nodes { get; set; }

    [Parameter]
    public RenderFragment<TNode> TitleTemplate { get; set; }

    [Parameter]
    public TNode SelectedNode { get; set; }

    [Parameter]
    public EventCallback<TNode> SelectedNodeChanged { get; set; }

    [Parameter]
    public Func<TNode, IEnumerable<TNode>> ChildSelector { get; set; }

    [Parameter]
    public IList<TNode> ExpandedNodes { get; set; } = new List<TNode>();

    [Parameter]
    public EventCallback<IList<TNode>> ExpandedNodesChanged { get; set; }

    [Parameter]
    public TreeStyle Style { get; set; } = TreeStyle.Bootstrap;

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public Func<TNode, bool> HasChildNodes { get; set; } = node => true;

    private void OnToggleNode(TNode node, bool expand)
    {
        var expanded = ExpandedNodes.Contains(node);

        if (expanded && !expand)
        {
            ExpandedNodes.Remove(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
        else if (!expanded && expand)
        {
            ExpandedNodes.Add(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
    }

    private void OnSelectNode(TNode node)
    {
        SelectedNode = node;
        SelectedNodeChanged.InvokeAsync(node);
    }
}