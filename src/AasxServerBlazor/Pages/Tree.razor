@*
https://github.com/mwinkler/Blazor.Components/blob/master/LICENSE
*@
@using AasCore.Aas3_0
@using AasxServerBlazor.Data
@using AasxServerBlazor.TreeVisualisation
@using AasxServerBlazor.TreeVisualisation.Builders

@typeparam TNode

<div class="tree @(Visible ? string.Empty : "hidden")">
    @foreach (var node in Nodes ?? Enumerable.Empty<TNode>())
    {
        var treeItem = node as TreeItem;
        var treeItemIsAas = treeItem?.Tag is AssetAdministrationShell;
        var treeItemMargin = treeItemIsAas ? "aas-margin" : "normal-margin";

        <div class="tree-node row @treeItemMargin">
            @if (treeItemIsAas)
            {
                <div class="tree-icon column">
                    @{
                        var border = string.Empty;
                        var env = AasxServer.Program.env[treeItem.EnvironmentIndex];
                        if (env != null && env.getWrite())
                        {
                            border = "dotted-border";
                        }

                        var detailsImage = ImageBuilder.CreateDetailsImage(treeItem, out var url, out var svg);
                        var src = detailsImage != null ? $"data:image{(svg ? "/svg+xml" : string.Empty)};base64,{detailsImage}" : null;

                        if (!string.IsNullOrEmpty(detailsImage) && !url)
                        {
                            <img class="details-image @border" alt="Details Image" src="@src" />
                        }
                    }
                </div>
            }

            <div class="tree-title column" @onclick="@(() => OnToggleNode(node, !ExpandedNodes.Contains(node)))">
                <span class="icon @(ExpandedNodes.Contains(node) ? Style.CollapseNodeIconClass : Style.ExpandNodeIconClass)"></span>
                <span class="title @(SelectedNode?.Equals(node) == true ? Style.NodeTitleSelectedClass : "")" @onclick="@(() => OnSelectNode(node))">
                    @TitleTemplate(node)
                </span>
            </div>

            @if (HasChildNodes(node) && ExpandedNodes.Contains(node))
            {
                <Tree Nodes="ChildSelector(node)"
                      TitleTemplate="TitleTemplate"
                      ChildSelector="ChildSelector"
                      ExpandedNodes="ExpandedNodes"
                      ExpandedNodesChanged="ExpandedNodesChanged"
                      SelectedNode="SelectedNode"
                      SelectedNodeChanged="SelectedNodeChanged"
                      Visible="true"
                      HasChildNodes="HasChildNodes"
                      HtmlId="HtmlId"
                      Style="@Style" />
            }
        </div>
    }
</div>

@code {

    [Parameter] public IEnumerable<TNode> Nodes { get; set; }
    [Parameter] public RenderFragment<TNode> TitleTemplate { get; set; }
    [Parameter] public TNode SelectedNode { get; set; }
    [Parameter] public EventCallback<TNode> SelectedNodeChanged { get; set; }
    [Parameter] public Func<TNode, IEnumerable<TNode>> ChildSelector { get; set; }
    [Parameter] public IList<TNode> ExpandedNodes { get; set; } = new List<TNode>();
    [Parameter] public EventCallback<IList<TNode>> ExpandedNodesChanged { get; set; }
    [Parameter] public TreeStyle Style { get; set; } = TreeStyle.Bootstrap;
    [Parameter] public bool Visible { get; set; } = true;
    [Parameter] public Func<TNode, bool> HasChildNodes { get; set; } = _ => true;
    [Parameter] public Func<TreeItem, string> HtmlId { get; set; } = _ => string.Empty;

    private void OnToggleNode(TNode node, bool expand)
    {
        if (expand)
        {
            ExpandedNodes.Add(node);
        }
        else
        {
            ExpandedNodes.Remove(node);
        }
        ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
    }

    private void OnSelectNode(TNode node)
    {
        SelectedNode = node;
        SelectedNodeChanged.InvokeAsync(node);
    }
}
