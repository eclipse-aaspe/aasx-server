@*
https://github.com/mwinkler/Blazor.Components/blob/master/LICENSE
*@

@using Microsoft.AspNetCore.Components.Web
@using MW.Blazor
@using AasCore.Aas3_0
@using AasxServerBlazor.TreeVisualisation

@typeparam TNode
@*@using static AdminShellNS.AdminShellV20;*@
@using static TreePage

<div class="uic-tree @(Visible ? "" : "uic-tree--hidden")" style="float:left; padding: 1px; margin: 1px">
    @foreach (var node in Nodes ?? Enumerable.Empty<TNode>())
    {
        var nodeExpanded = ExpandedNodes.Contains(node);
        var nodeSelected = node.Equals(SelectedNode);
        var hasChilds = HasChildNodes(node);
        var it = node as TreeItem;
        bool itIsAas = it.Tag is AssetAdministrationShell;
        string itMargin = "margin: 0px";
        if (itIsAas)
            itMargin = "margin: 0px; margin-bottom: 3px";
        // @("nodeExpanded " + nodeExpanded + " nodeSelected " + nodeSelected + " hasChilds " + hasChilds)

        <div class="row" style="background-color:aliceblue; padding: 0px; @itMargin">
            @{
                if (itIsAas)
                {
                    <div class="col" style="max-width:50px;padding:1px;display:flex;justify-content:center;">
                        @{
                            string border = "";
                            var env = AasxServer.Program.env[it.EnvironmentIndex];
                            if (env != null && env.getWrite())
                            {
                                border = "border:dotted;border-color:blue;";
                            }
                            bool svg = false;
                            bool url = false;
                            string detailsImage = createDetailsImage(it, out url, out svg);
                            if (detailsImage != "" && !url)
                            {
                                if (!svg)
                                {
                                    <img style="max-height:50px;object-fit:contain;@border" alt="Details Image"
                                         src=data:image;base64,@detailsImage />
                                }
                                else
                                {
                                    <img style="max-height:50px;object-fit:contain;@border" alt="Details Image"
                                        src=data:image/svg+xml;base64,@detailsImage />
                                }
                            }
                        }
                    </div>       
                }
            }
            <div class="col" style="width:100%;float:left;vertical-align:central">
                @if (hasChilds)
                {
                    string iconId = "";
                    if (AasxServer.Program.htmlId)
                        iconId = HtmlId(it) + "._icon";
                    <span class="uic-tree__icon" @onclick="@(() => OnToggleNode(node, !nodeExpanded))" id="@iconId">
                        <i class="@(nodeExpanded ? Style.CollapseNodeIconClass : Style.ExpandNodeIconClass)"></i>
                    </span>
                }

                <div class="uic-tree__title" style="width:100%">
                @{
                    string titleId = "";
                    if (AasxServer.Program.htmlId)
                        titleId = HtmlId(node as TreeItem) + "._title";
                    <span class="@Style.NodeTitleClass @(nodeSelected ? Style.NodeTitleSelectedClass : "")" @onclick="@(() => OnSelectNode(node))" id="@titleId">
                        @TitleTemplate(node) @{
                            /* @(" " + node.GetHashCode() + " ") */
                        }
                    </span>
                }
                </div>

                @if (hasChilds)
                {
                    if (nodeExpanded)
                    {
                        <Tree Nodes="ChildSelector(node)"
                          TitleTemplate="TitleTemplate"
                          ChildSelector="ChildSelector"
                          ExpandedNodes="ExpandedNodes"
                          ExpandedNodesChanged="ExpandedNodesChanged"
                          SelectedNode="SelectedNode"
                          SelectedNodeChanged="SelectedNodeChanged"
                          Visible="nodeExpanded"
                          HasChildNodes="HasChildNodes"
                          HtmlId="HtmlId" />
                    }
                }
            </div>
        </div>
    }

</div>

@code {

    [Parameter] public IEnumerable<TNode> Nodes { get; set; }

    [Parameter] public RenderFragment<TNode> TitleTemplate { get; set; }

    [Parameter] public TNode SelectedNode { get; set; }
    [Parameter] public EventCallback<TNode> SelectedNodeChanged { get; set; }

    [Parameter] public Func<TNode, IEnumerable<TNode>> ChildSelector { get; set; }

    [Parameter] public IList<TNode> ExpandedNodes { get; set; } = new List<TNode>();
    [Parameter] public EventCallback<IList<TNode>> ExpandedNodesChanged { get; set; }

    [Parameter] public TreeStyle Style { get; set; } = TreeStyle.Bootstrap;

    [Parameter] public bool Visible { get; set; } = true;

    [Parameter] public Func<TNode, bool> HasChildNodes { get; set; } = node => true;

    [Parameter] public Func<TreeItem, string> HtmlId { get; set; } = node => "";

    private void OnToggleNode(TNode node, bool expand)
    {
        var expanded = ExpandedNodes.Contains(node);

        if (expanded && !expand)
        {
            ExpandedNodes.Remove(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
        else if (!expanded && expand)
        {
            ExpandedNodes.Add(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
    }

    private void OnSelectNode(TNode node)
    {
        SelectedNode = node;
        SelectedNodeChanged.InvokeAsync(node);
    }

}