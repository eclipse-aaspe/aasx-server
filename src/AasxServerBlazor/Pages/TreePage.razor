@page "/"
@inject AASService SubmodelService
@inject NavigationManager NavigationManager
@inject ISecurityService SecService
@using AasCore.Aas3_0
@using AasSecurity;
@using AasSecurity.Models;
@using Extensions
@using Microsoft.IdentityModel.Tokens;
@using System
@using System.Net;
@using QRCoder;
@using System.Drawing;
@using System.IO;
@using AasxServerBlazor.Data
@using static AasxServerStandardBib.TimeSeriesPlotting;

@implements IDisposable

<div class="column-12 row">
    <br/>
    <div class="column-5" style="border-width:3px; border-style: solid; border-columnor: blue; border-radius: 8px; background-columnor:aliceblue;
            word-wrap: break-word; word-break: break-all; position: sticky">
        @updateVisibleTree(Items, SelectedNode)
        @if (Program.isLoading)
        {
            <span style="columnor:white;background-columnor:blue;">Loading...</span>
        }
        else
        {
            AasxRestServerLibrary.AasxRestServer.TestResource.initListOfRepositories();
        }
        <Tree Nodes="Items" ChildSelector="@(item => item.Childs)"
              @bind-SelectedNode="SelectedNode"
              @bind-ExpandedNodes="ExpandedNodes"
              HasChildNodes="@(item => item.Childs?.Any() == true)"
              HtmlId="@(item => item.GetHtmlId())">
            <TitleTemplate>
                @{
                    var getPolicy = "";
                    @if (GlobalSecurityVariables.WithAuthentication)
                    {
                        var display = false;
                        var access = false;
                        var withAllow = false;
                        if (context.Tag is Submodel sm)
                        {
                            // check, if access to submodel is allowed
                            var error = "";
                            withAllow = false;
                            access = SecService.AuthorizeRequest(null, "/submodels", AccessRights.READ,
                                out error, out withAllow, out getPolicy, sm.IdShort!, "submodel", sm);
                            display = true;
                        }

                        if (context.Tag is ISubmodelElement sme)
                        {
                            var path = sme.IdShort;
                            var p = sme.Parent;
                            while (!(p is Submodel))
                            {
                                path = (p as ISubmodelElement).IdShort + "." + path;
                                p = (p as ISubmodelElement).Parent;
                            }

                            path = (p as Submodel).IdShort + "." + path;
                            var error = "";
                            access = SecService.AuthorizeRequest(null, "/submodel-elements", AccessRights.READ,
                                out error, out withAllow, out getPolicy, path, "", p);
                            display = true;
                        }

                        if (display)
                        {
                            if (context.Childs == null || context.Childs.Count() == 0)
                                withAllow = false;
                            if (access)
                            {
                                <span style="columnor:green;background-columnor:green;">&nbsp&nbsp</span>
                                <span>&nbsp</span>
                            }
                            else
                            {
                                if (!withAllow)
                                {
                                    <span style="columnor:red;background-columnor:red;">&nbsp&nbsp</span>
                                    <span>&nbsp</span>
                                }
                                else
                                {
                                    <span style="columnor:red;background-columnor:red;">&nbsp</span>
                                    <span style="columnor:green;background-columnor:green;">&nbsp</span>
                                    <span>&nbsp</span>
                                }
                            }
                        }
                    }

                    <span style="columnor:white;background-columnor:blue;">@context.BuildNodeRepresentation()</span>
                    @context.GetIdentifier()
                    @if (Program.withPolicy && getPolicy != "")
                    {
                        <span style="columnor:blue">&nbsp @getPolicy</span>
                    }

                    <span style="columnor:blue;font-size:14px">@context.GetSymbolicRepresentation()</span>
                    <span style="columnor:lightgray;font-size:14px">@context.GetTimeStamp()</span>
                }
            </TitleTemplate>
        </Tree>
    </div>
    <div class="column-7" style="border-width: 3px; border-style: solid; border-columnor: blue; border-radius: 8px; position: sticky; background-columnor:aliceblue;">
        <div class="sticky-top" style="word-wrap:break-word;word-break:break-all;">
            @{
                if (SelectedNode != null)
                {
                    if (!(SelectedNode.Tag is string))
                    {
                        <span style="columnor:white;background-columnor:blue;" id="SelectedNodeInfoType">@SelectedNode.BuildNodeRepresentation()</span>
                        <span id="SelectedNodeInfoId">@SelectedNode.GetIdentifier()</span>
                        <br>
                    }
                    else
                    {
                        if (SelectedNode.Tag is string && SelectedNode.Text.Contains("/readme"))
                        {
                            var text = System.IO.File.ReadAllText(SelectedNode.Text);
                            text = text.Replace("%BLAZOR%", Program.externalBlazor);
                            if (text.Contains("%ACCESSRULES%"))
                            {
                                var accessRules = SecService.GetSecurityRules();
                                <table class="table table-bordered table-sm">
                                    <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th nowrap>Kind</th>
                                        <th>Permission</th>
                                        <th>Type</th>
                                        <th>API</th>
                                        <th>Path</th>
                                        <th>SemanticID</th>
                                        <th>See</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @{
                                        var lines = accessRules.Split('\n');
                                        foreach (var l in lines)
                                        {
                                            <tr>
                                                @{
                                                    var cols = l.Split('\t');
                                                    for (var c = 0; c < cols.Count(); c++)
                                                    {
                                                        if (c != 1 && c != 2)
                                                        {
                                                            <td>@cols[c]</td>
                                                        }
                                                        else
                                                        {
                                                            <td nowrap>@cols[c]</td>
                                                        }
                                                    }
                                                }
                                            </tr>
                                        }
                                    }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <span>@((MarkupString) text)</span>
                            }
                        }
                    }
                }

                var nodeBuilder = TreeDetailsBuilderFactory.Create(SelectedNode);
                for (var line = 0; line < 20; line++)
                {
                    var nodeDetails0 = nodeBuilder.Build(SelectedNode, line, 0);
                    var nodeDetails1 = nodeBuilder.Build(SelectedNode, line, 1);
                    var nodeDetails2 = nodeBuilder.Build(SelectedNode, line, 2);
                    if (nodeDetails0 != "" && nodeDetails1 != "")
                    {
                        var detailsId = "SelectedNodeDetailsLeft_" + line;
                        <span style="columnor:white;background-columnor:blue;" id="@detailsId">@nodeDetails0</span>
                        detailsId = "SelectedNodeDetailsRight_" + line;
                        <span id="@detailsId">&nbsp;@nodeDetails1 @nodeDetails2</span>
                        <br>
                    }
                }

                if (SelectedNode != null && SelectedNode.Tag is IReferable r)
                {
                    <span style="columnor:lightgray;">UPDATE @r.TimeStamp.ToString("yy-MM-dd HH:mm:ss.fff")</span>
                    <br/>
                    <button style="border-width: 1px; border-columnor: black; background-columnor: lightgray" @onclick="setTimeStamp">TIMESTAMP</button>
                    <br/>
                    <span style="columnor:lightgray;">CREATE @r.TimeStampCreate.ToString("yy-MM-dd HH:mm:ss.fff")</span>
                    <br/>
                    <span style="columnor:lightgray;">TREE @r.TimeStampTree.ToString("yy-MM-dd HH:mm:ss.fff")</span>

                    <br/>
                    @code {

                        private void setTimeStamp()
                        {
                            (SelectedNode.Tag as IReferable).SetTimeStamp(DateTime.UtcNow);
                            Program.env[SelectedNode.EnvironmentIndex].setWrite(true);
                        }

                    }
                }

                var externalLink = false;
                //var link = AasxItemLinkService.Create(SelectedNode, NavigationManager.Uri, out externalLink); TODO: fix this before PR
                var link = "https://example.com";
                if (SelectedNode != null && link != "")
                {
                    if (true)
                    {
                        <a href="@link" target="_blank">@link</a>
                        <br>
                    }
                    else
                    {
                        <button onclick="window.location.href = '@link'; ">Download</button>
                        <br>
                    }

                    if (SelectedNode != null && SelectedNode.Tag is Submodel && Program.connectServer != "")
                    {
                        var toPublish = Program.submodelsToPublish.Contains(SelectedNode.Tag);
                        var toSubscribe = Program.submodelsToSubscribe.Contains(SelectedNode.Tag);
                        if (toPublish)
                        {
                            <button style="columnor:white;background-columnor:blue" @onclick="resetSubmodelToPublish">Publish</button>
                        }
                        else
                        {
                            <button @onclick="setSubmodelToPublish">Publish</button>
                        }

                        if (toSubscribe)
                        {
                            <button style="columnor:white;background-columnor:blue" @onclick="resetSubmodelToSubscribe">Subscribe</button>
                        }
                        else
                        {
                            <button @onclick="setSubmodelToSubscribe">Subscribe</button>
                        }
                        @code {

                            private void resetSubmodelToPublish()
                            {
                                Program.submodelsToPublish.Remove(SelectedNode.Tag);
                            }

                            private void setSubmodelToPublish()
                            {
                                var toSubscribe = Program.submodelsToSubscribe.Contains(SelectedNode.Tag);
                                if (!toSubscribe)
                                    Program.submodelsToPublish.Add(SelectedNode.Tag);
                            }

                            private void resetSubmodelToSubscribe()
                            {
                                Program.submodelsToSubscribe.Remove(SelectedNode.Tag);
                            }

                            private void setSubmodelToSubscribe()
                            {
                                var toPublish = Program.submodelsToPublish.Contains(SelectedNode.Tag);
                                if (!toPublish)
                                    Program.submodelsToSubscribe.Add(SelectedNode.Tag);
                            }

                        }
                    }
                }

                if (SelectedNode != null && SelectedNode.Tag is Property && Program.edit)
                {
                    <input @bind="CurrentValue" style="width:500px; border-width: 1px; border-columnor: black;"/>
                    <span style="border-width: 1px; border-columnor: black; background-columnor: blue;">@CurrentValue</span>
                    <br>
                    @code { private string CurrentValue { get; set; } }
                    if (CurrentValue != null && CurrentValue != "")
                    {
                        if (SelectedNode.Tag is Property)
                        {
                            if (CurrentValue == " ")
                                CurrentValue = "";
                            (SelectedNode.Tag as Property).Value = CurrentValue;
                            (SelectedNode.Tag as Property).SetTimeStamp(DateTime.UtcNow);
                            Program.env[SelectedNode.EnvironmentIndex].setWrite(true);
                            Program.signalNewData(0);
                        }

                        CurrentValue = "";
                    }
                }

                if (SelectedNode != null && (SelectedNode.Tag is AssetAdministrationShell || SelectedNode.Tag is AasCore.Aas3_0.File))
                {
                    if (SelectedNode.Tag is AssetAdministrationShell)
                    {
                        <button style="border-width: 1px; border-columnor: black; columnor: white; background-columnor: blue" @onclick="runCreateQRCodeImage">QRCODE</button>
                        <br/>
                        var qrCodeService = new QrCodeService();
                        var qrcodeLink = QrCodeService.GetQrCodeLink(SelectedNode);
                        if (Program.generatedQrCodes.ContainsKey(SelectedNode.Tag))
                        {
                            var qrcodeImage = QrCodeService.GetQrCodeImage(SelectedNode);
                            if (qrcodeImage != "")
                            {
                                <a href="@qrcodeLink" target="_blank">
                                    <div>
                                        <img src=data:image;base64,@qrcodeImage style="max-width: 25%;" alt="Qrcode Image"/>
                                    </div>
                                </a>
                            }
                        }
                        else
                        {
                            <a href="@qrcodeLink" target="_blank">@qrcodeLink</a>
                            <br>
                        }
                        @code {

                            private void runCreateQRCodeImage()
                            {
                                var qrCodeService = new QrCodeService();
                                qrCodeService.CreateQrCodeImage(SelectedNode);
                            }

                        }
                    }
                }

                if (SelectedNode != null && SelectedNode.Tag is Submodel sm)
                {
                    var idEncoded = Base64UrlEncoder.Encode(sm.Id);
                    var path = Program.externalBlazor + "/submodels/" + idEncoded;
                    <span style="columnor:white;background-columnor:blue;">URL:</span>
                    <span>&nbsp</span>
                    <a href="@path" target="_blank">@path</a>
                    <br>
                }

                if (SelectedNode != null && SelectedNode.Tag is ISubmodelElement sme)
                {
                    var path = sme.IdShort;
                    var parent = sme.Parent as IReferable;
                    while (parent is not Submodel)
                    {
                        if (parent is ISubmodelElementList parentList)
                        {
                            if (path.Equals(sme.IdShort))
                            {
                                var index = parentList.Value?.IndexOf(sme);
                                path = "[" + index + "]";
                            }

                            path = parentList.IdShort + path;
                        }
                        else if (parent.Parent is ISubmodelElementList prevParentList)
                        {
                            var index = prevParentList.Value?.IndexOf(parent as ISubmodelElement);
                            path = "[" + index + "]" + "." + path;
                        }
                        else
                        {
                            path = parent.IdShort + "." + path;
                        }

                        parent = (IReferable) parent.Parent;
                    }

                    var idEncoded = Base64UrlEncoder.Encode((parent as Submodel).Id);
                    path = Program.externalBlazor + "/submodels/" + idEncoded + "/submodel-elements/" + path;
                    <span style="columnor:white;background-columnor:blue;">URL:</span>
                    <span>&nbsp</span>
                    <a href="@path" target="_blank">@path</a>
                    <br>
                }

                if (SelectedNode != null && SelectedNode.Tag is SubmodelElementCollection smc)
                {
                    var semanticId = "";

                    try
                    {
                        semanticId = smc.SemanticId?.GetAsIdentifier();
                    }
                    catch
                    {
                    }

                    if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeries/1/0" ||
                        semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
                    {
                        var diff = smc.TimeStamp - timeStampPlot;

                        if (smc != collectionPlot || diff.TotalSeconds < 0 || diff.TotalSeconds >= 5)
                        {
                            watchTimeToProcessImage = System.Diagnostics.Stopwatch.StartNew();

                            collectionPlot = smc;
                            timeStampPlot = smc.TimeStampTree;

                            _timeSeriesData.Clear();

                            // make initial data for time series
                            var tsd = new TimeSeriesData() {SourceTimeSeries = smc};
                            _timeSeriesData.Add(tsd);

                            // plot arguments for time series
                            tsd.Args = PlotArguments.Parse(smc.FindQualifierOfType("TimeSeries.Args")?.Value);

                            // TODO: info - ZveiTimeSeriesDataV10 is currently hardcoded as JSON string in code
                            var pcts = ZveiTimeSeriesDataV10.Static;

                            var tssReferenceKey = new Key(KeyTypes.ConceptDescription, "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0");

                            // is it a segment
                            if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
                            {
                                TimeSeriesAddSegmentData(pcts, tsd, smc);
                            }
                            else
                            {
                                // search for segements on current level
                                var smcAllValues = smc.Value.FindAllSemanticIdAs<SubmodelElementCollection>(tssReferenceKey, MatchMode.Relaxed);

                                if (smcAllValues.Count() != 0)
                                {
                                    foreach (var smcseg in smcAllValues)
                                    {
                                        TimeSeriesAddSegmentData(pcts, tsd, smcseg);
                                    }
                                }
                            }

                            _timeSeriesData?.RenderTimeSeries(defPlotHeight: 200, "en", bi.sessionNumber, plotFilter.CombinedStartDateTime, plotFilter.CombinedEndDateTime);
                            watchTimeToProcessImage.Stop();
                        }

                        byte[] imageArray;
                        var timeSeriesImageBase64 = "";
                        var scottplotImgPath = "wwwroot/images/scottplot/smc_timeseries_clientid" + bi.sessionNumber + ".png";

                        if (System.IO.File.Exists(scottplotImgPath))
                        {
                            imageArray = System.IO.File.ReadAllBytes(scottplotImgPath);
                            timeSeriesImageBase64 = Convert.ToBase64String(imageArray);
                        }

                        var elapsedMsToProcessImage = watchTimeToProcessImage.ElapsedMilliseconds;

                        if (System.IO.File.Exists(scottplotImgPath))
                        {
                            <EditForm Model="@plotFilter" OnValidSubmit="() => plotFilter.ApplyFilterToTimeSeriesData(_timeSeriesData, bi.sessionNumber)">
                                <label for="filterFromDate">Filter from</label>
                                <InputDate id="filterFromDate" @bind-Value="plotFilter.StartDate"/>
                                <input type="time" @bind-value="plotFilter.StartTime"/>
                                <label for="filterToDate">Filter to</label>
                                <InputDate id="filterToDate" @bind-Value="plotFilter.EndDate"/>
                                <input type="time" @bind-value="plotFilter.EndTime"/>
                                <div>
                                    <button style="border-width: 1px; border-columnor: black; background-columnor: lightgray"
                                            type="submit">
                                        Apply
                                    </button>
                                    <button style="border-width: 1px; border-columnor: black; background-columnor: lightgray"
                                            @onclick="plotFilter.SetInitialFilterState">
                                        Reset
                                    </button>
                                    <button style="border-width: 1px; border-columnor: black; background-columnor: lightgray"
                                            @onclick="() => { plotFilterTsdOffset = 0; plotFilter.SetFilterStateForDay(0); }">
                                        Today
                                    </button>
                                    <button style="border-width: 1px; border-columnor: black; background-columnor: lightgray"
                                            @onclick="() => { plotFilterTsdOffset = -1; plotFilter.SetFilterStateForDay(-1); }">
                                        Yesterday
                                    </button>
                                    <button style="border-width: 1px; border-columnor: black; background-columnor: lightgray"
                                            @onclick="() => plotFilter.SetFilterStateForDay(--plotFilterTsdOffset)">
                                        Prev day
                                    </button>
                                    <button style="border-width: 1px; border-columnor: black; background-columnor: lightgray"
                                            @onclick="() => plotFilter.SetFilterStateForDay(++plotFilterTsdOffset)">
                                        Next day
                                    </button>
                                </div>
                            </EditForm>

                            <div class="d-flex flex-columnumn">
                                <img @onclick="() => showImageModal = !showImageModal" src=data:image;base64,@timeSeriesImageBase64 alt="Visualization of time series" style="max-width:950px;cursor:zoom-in;"/>
                                <span class="text-muted" style="font-size:14px;">
                                    Image processing took @elapsedMsToProcessImage ms (Last update: @timeStampPlot.ToString("yy-MM-dd HH:mm:ss.fff"))
                                </span>
                            </div>

                            <div class="modal modal-fullscreen @(showImageModal ? " d-block" : "d-none")" style="margin-top:3.5rem;" tabindex="-1">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Visualization of time series</h5>
                                            <button type="button" @onclick="() => showImageModal = !showImageModal" class="close" data-dismiss="modal" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body text-center">
                                            <img @onclick="() => showImageModal = !showImageModal" src=data:image;base64,@timeSeriesImageBase64 alt="Visualization of time series" style="max-width:90%;max-height:90%;cursor:zoom-out;" class="mb-2"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="my-2">Rendering time series...</div>
                        }
                    }
                    else
                    {
                        collectionPlot = null;
                    }
                }
            }

            @{
                bool svg;
                bool url;
                var detailsImage = ImageBuilder.CreateDetailsImage(SelectedNode, out url, out svg);
                if (detailsImage != "")
                {
                    if (!svg)
                    {
                        if (!url)
                        {
                            <br/>
                            <div>
                                <img src=data:image;base64,@detailsImage style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                        else
                        {
                            <br/>
                            <div>
                                <img src="@detailsImage" style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                    }
                    else
                    {
                        if (!url)
                        {
                            <br/>
                            <div>
                                <img src=data:image/svg+xml;base64,@detailsImage style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                        else
                        {
                            <br/>
                            <div>
                                <img src="detailsImage" style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                    }
                }

                if (SelectedNode != null && (SelectedNode.Tag is BasicEventElement be))
                {
                    if (be.Observed != null)
                    {
                        var okey = be.Observed.GetAsExactlyOneKey().ToStringExtended();
                        <span style="columnor:white;background-columnor:blue;">Observed</span>
                        <span>@(" " + okey)</span>
                        <br/>
                        var refsme = Program.env[0].AasEnv.FindReferableByReference(be.Observed);
                        if (refsme != null)
                        {
                            <span style="columnor:lightgray;">UPDATE @refsme.TimeStamp.ToString("yy-MM-dd HH:mm:ss.fff")</span>
                            <br/>
                            <span style="columnor:lightgray;">CREATE @refsme.TimeStampCreate.ToString("yy-MM-dd HH:mm:ss.fff")</span>
                            <br/>
                        }
                        else
                        {
                            <span>Referenced element does not exist!</span>
                            <br/>
                        }
                    }
                }
            }
        </div>
    </div>
</div>


@inject IJSRuntime js
@inject BlazorSessionService bi;
@using AasxServer;
@using AdminShellNS;
@using System.Globalization;
@using System.Reflection;
@using AasxServerBlazor.DateTimeServices
@using AasxServerBlazor.TreeVisualisation
@using AasxServerBlazor.TreeVisualisation.Builders
@using AasxServerBlazor.WebActions
@using AasxServerBlazor.WebActions.AasxLinkCreation
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using ScottPlot;

@code {
    System.Diagnostics.Stopwatch watchTimeToProcessImage = new();
    DateTime timeStampPlot = new();
    PlotFilter plotFilter = new(new SystemDateTimeProvider());
    SubmodelElementCollection collectionPlot = null;
    bool showImageModal = false;
    ListOfTimeSeriesData _timeSeriesData = new();
    int plotFilterTsdOffset = 0;

    List<TreeItem> Items = null;

    IList<TreeItem> ExpandedNodes = new List<TreeItem>();

    private TreeItem SelectedNode { get; set; }

    static ulong dataVersion = 0;

    static int hack = 0;

    System.Threading.Timer refresh = null;

    protected override void OnInitialized()
    {
        SubmodelService.NewDataAvailable += NewData;
        Program.signalNewData(1);
    }

    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }

    int newDataMode = 0;

    void NewData(object source, EventArgs args)
    {
        if (Program.isLoading)
            return;

        if (newDataMode != 0 || args is not Program.NewDataAvailableArgs newArgs)
        {
            return;
        }

        newDataMode = newArgs.signalNewDataMode;
        InvokeAsync(() => StateHasChanged());
    }

    bool update = true;

    string updateVisibleTree(List<TreeItem> viewItems, TreeItem selectedNode)
    {
        if (update)
        {
            switch (newDataMode)
            {
                // 0 == same tree, only values changed
                case 0:
                    break;
                // 1 == same tree, structure may change
                // 2 == build new tree, keep open nodes
                case 1:
                case 2:
                    var isSelected = selectedNode != null;
                    var isExpanded = ExpandedNodes.Count != 0;
                    var expandedNodesPath = new List<string>[ExpandedNodes.Count + 1];
                    var selectedNodePath = selectedNode.GetPath();
                    if (isExpanded)
                    {
                        for (var j = 0; j < ExpandedNodes.Count; j++)
                        {
                            expandedNodesPath[j] = ExpandedNodes[j].GetPath();
                        }
                    }

                    SubmodelService.buildTree();
                    Items = SubmodelService.GetTree(selectedNode, ExpandedNodes);
                    ExpandedNodes.Clear();
                    selectedNode = null;
                    if (isSelected)
                    {
                        selectedNode = findPath(selectedNodePath);
                    }

                    if (isExpanded)
                    {
                        foreach (var path in expandedNodesPath)
                        {
                            var p = findPath(path);
                            if (p != null)
                                ExpandedNodes.Add(p);
                        }
                    }

                    newDataMode = 0;
                    break;
                // 3 == build new tree, all nodes closed
                case 3:
                    SubmodelService.buildTree();
                    Items = SubmodelService.GetTree(selectedNode, ExpandedNodes);
                    ExpandedNodes.Clear();
                    selectedNode = null;
                    newDataMode = 0;
                    break;
            }

            SelectedNode = selectedNode;
        }

        return "";
    }

    TreeItem findPath(List<string> path)
    {
        if (path != null && path.Count > 0)
        {
            TreeItem found = null;
            int k = 0;
            while (k < Items.Count)
            {
                var i = Items[k];
                if (i.Text != path[0])
                {
                    k++;
                    continue;
                }

                var j = 0;
                found = i;
                while (++j < path.Count)
                {
                    if (i.Childs != null)
                    {
                        found = null;
                        foreach (var c in i.Childs)
                        {
                            if (c.Text == path[j])
                            {
                                found = c;
                                break;
                            }
                        }
                    }

                    if (found == null)
                    {
                        return null;
                    }

                    i = found;
                }

                if (found != null)
                    return found;
            }
        }

        return null;
    }
    
}

<style>
.modal-fullscreen {
  padding: 0 !important;
}
.modal-fullscreen .modal-dialog {
  width: 100%;
  max-width: none;
  height: 100%;
  margin: 0;
}
.modal-fullscreen .modal-content {
  height: 100%;
  border: 0;
  border-radius: 0;
}
.modal-fullscreen .modal-body {
  overflow-y: auto;
}
</style>