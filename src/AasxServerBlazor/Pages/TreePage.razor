@page "/"
@implements IDisposable
@inject AASService SubmodelService
@inject BlazorSessionService BlazorSessionService;
@inject IJSRuntime JsRuntime
@inject ISecurityService SecService
@inject NavigationManager NavigationManager
@using AasCore.Aas3_0
@using AasSecurity.Models;
@using AasSecurity;
@using AasxServer;
@using AasxServerBlazor.Data
@using AasxServerBlazor.DateTimeServices
@using AasxServerBlazor.TreeVisualisation
@using AasxServerBlazor.TreeVisualisation.Builders
@using AasxServerBlazor.WebActions
@using AasxServerBlazor.WebActions.AasxLinkCreation
@using AdminShellNS;
@using Extensions
@using Microsoft.IdentityModel.Tokens;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using QRCoder;
@using ScottPlot;
@using System
@using System.Drawing;
@using System.Globalization;
@using System.IO;
@using System.Net;
@using System.Reflection;
@using static AasxServerStandardBib.TimeSeriesPlotting;

<div class="column-12 row aas-model">
    <div class="column-5 tree-container">
        @UpdateVisibleTree(_items, SelectedNode)
        @if (Program.isLoading)
        {
            <span class="loading">Loading...</span>
        }
        else
        {
            AasxRestServerLibrary.AasxRestServer.TestResource.initListOfRepositories();
        }
        <Tree Nodes="_items" ChildSelector="@(item => item.Childs)"
              @bind-SelectedNode="SelectedNode"
              @bind-ExpandedNodes="_expandedNodes"
              HasChildNodes="@(item => item.Childs?.Any() == true)"
              HtmlId="@(item => item.GetHtmlId())">
            <TitleTemplate>
                @{
                    var getPolicy = string.Empty;
                    @if (GlobalSecurityVariables.WithAuthentication)
                    {
                        var display = false;
                        var access = false;
                        var withAllow = false;
                        switch (context.Tag)
                        {
                            case Submodel submodel:
                            {
                                // check, if access to submodel is allowed
                                access = SecService.AuthorizeRequest(null, "/submodels", AccessRights.READ,
                                    out _, out withAllow, out getPolicy, submodel.IdShort!, "submodel", submodel);
                                display = true;
                                break;
                            }
                            case ISubmodelElement submodelElement:
                            {
                                var path = submodelElement.IdShort;
                                var submodelElementParent = submodelElement.Parent;
                                while (submodelElementParent is not Submodel)
                                {
                                    path = ((ISubmodelElement) submodelElementParent)?.IdShort + "." + path;
                                    submodelElementParent = (submodelElementParent as ISubmodelElement)?.Parent;
                                }

                                path = $"{(submodelElementParent as Submodel).IdShort}.{path}";
                                var error = string.Empty;
                                access = SecService.AuthorizeRequest(null, "/submodel-elements", AccessRights.READ,
                                    out error, out withAllow, out getPolicy, path, string.Empty, submodelElementParent);
                                display = true;
                                break;
                            }
                        }

                        if (display)
                        {
                            if (context.Childs == null || context.Childs.Count() == 0)
                                withAllow = false;
                            if (access)
                            {
                                <span class="access">Access</span>
                            }
                            else
                            {
                                if (!withAllow)
                                {
                                    <span class="not-allowed">Not Allowed</span>
                                }
                                else
                                {
                                    <span class="not-allowed">Allowed</span>
                                }
                            }
                        }
                    }

                    <span class="node-representation">@context.BuildNodeRepresentation()</span>
                    @context.GetIdentifier()
                    @if (Program.withPolicy && !string.IsNullOrEmpty(getPolicy))
                    {
                        <span class="policy">@getPolicy</span>
                    }

                    <span class="symbolic-representation">@context.GetSymbolicRepresentation()</span>
                    <span class="timestamp">@context.GetTimeStamp()</span>
                }
            </TitleTemplate>
        </Tree>
    </div>
    <div class="column-7 details-container">
        <AasxServerBlazor.Pages.TreeNodeComponents.TreeNodeDetailsContainer SelectedNode="@SelectedNode"/>
    </div>
</div>

@code {
    List<TreeItem> _items = null;
    IList<TreeItem> _expandedNodes = new List<TreeItem>();
    static ulong _dataVersion = 0;
    static int _hack = 0;
    System.Threading.Timer _refresh = null;
    int _newDataMode = 0;
    bool _update = true;

    private TreeItem SelectedNode { get; set; }

    protected override void OnInitialized()
    {
        SubmodelService.NewDataAvailable += NewData;
        Program.signalNewData(1);
    }

    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }

    void NewData(object source, EventArgs args)
    {
        if (Program.isLoading)
            return;

        if (_newDataMode != 0 || args is not Program.NewDataAvailableArgs newArgs)
        {
            return;
        }

        _newDataMode = newArgs.signalNewDataMode;
        InvokeAsync(StateHasChanged);
    }

    string UpdateVisibleTree(List<TreeItem> viewItems, TreeItem selectedNode)
    {
        if (!_update)
        {
            return string.Empty;
        }

        switch (_newDataMode)
        {
            case (int) DataMode.SameTreeValuesChanged:
                break;

            case (int) DataMode.SameTreeStructureMayChange:
            case (int) DataMode.BuildNewTreeKeepOpenNodes:
                BuildTree(selectedNode);
                UpdateNodes(selectedNode);
                break;

            case (int) DataMode.BuildNewTreeAllNodesClosed:
                BuildTree(selectedNode);
                _expandedNodes.Clear();
                break;
        }

        SelectedNode = selectedNode;

        return string.Empty;
    }

    void BuildTree(TreeItem selectedNode)
    {
        SubmodelService.buildTree();
        _items = SubmodelService.GetTree(selectedNode, _expandedNodes);
    }

    void UpdateNodes(TreeItem selectedNode)
    {
        _expandedNodes.Clear();

        foreach (var path in _expandedNodes.Select(expandedNode => TreePath.Find(expandedNode.GetPath(), _items)).Where(p => p != null))
        {
            _expandedNodes.Add(path);
        }

        _newDataMode = (int) DataMode.SameTreeValuesChanged;
    }

    enum DataMode
    {
        SameTreeValuesChanged,
        SameTreeStructureMayChange,
        BuildNewTreeKeepOpenNodes,
        BuildNewTreeAllNodesClosed
    }
}
