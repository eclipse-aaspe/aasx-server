@page "/"
@inject AASService SubmodelService
@inject NavigationManager NavigationManager
@inject ISecurityService SecService
@using AasCore.Aas3_0
@using AasSecurity;
@using AasSecurity.Models;
@using Extensions
@using Microsoft.IdentityModel.Tokens;
@using System
@using System.Net;
@using QRCoder;
@using System.Drawing;
@using System.IO;
@using AasxServerBlazor.Data
@using static AasxServerStandardBib.TimeSeriesPlotting;

@implements IDisposable

<div class="col-12 row">
    <br/>
    <div class="col-5" style="border-width:3px; border-style: solid; border-color: blue; border-radius: 8px; background-color:aliceblue;
            word-wrap: break-word; word-break: break-all; position: sticky">
        @updateVisibleTree(Items, SelectedNode)
        @if (Program.isLoading)
        {
            <span style="color:white;background-color:blue;">Loading...</span>
        }
        else
        {
            AasxRestServerLibrary.AasxRestServer.TestResource.initListOfRepositories();
        }
        <Tree Nodes="Items" ChildSelector="@(item => item.Childs)"
              @bind-SelectedNode="SelectedNode"
              @bind-ExpandedNodes="ExpandedNodes"
              HasChildNodes="@(item => item.Childs?.Any() == true)"
              HtmlId="@(item => item.GetHtmlId())">
            <TitleTemplate>
                @{
                    var getPolicy = "";
                    @if (GlobalSecurityVariables.WithAuthentication)
                    {
                        var display = false;
                        var access = false;
                        var withAllow = false;
                        if (context.Tag is Submodel sm)
                        {
                            // check, if access to submodel is allowed
                            var error = "";
                            withAllow = false;
                            access = SecService.AuthorizeRequest(null, "/submodels", AccessRights.READ,
                                out error, out withAllow, out getPolicy, sm.IdShort!, "submodel", sm);
                            display = true;
                        }

                        if (context.Tag is ISubmodelElement sme)
                        {
                            var path = sme.IdShort;
                            var p = sme.Parent;
                            while (!(p is Submodel))
                            {
                                path = (p as ISubmodelElement).IdShort + "." + path;
                                p = (p as ISubmodelElement).Parent;
                            }

                            path = (p as Submodel).IdShort + "." + path;
                            var error = "";
                            access = SecService.AuthorizeRequest(null, "/submodel-elements", AccessRights.READ,
                                out error, out withAllow, out getPolicy, path, "", p);
                            display = true;
                        }

                        if (display)
                        {
                            if (context.Childs == null || context.Childs.Count() == 0)
                                withAllow = false;
                            if (access)
                            {
                                <span style="color:green;background-color:green;">&nbsp&nbsp</span>
                                <span>&nbsp</span>
                            }
                            else
                            {
                                if (!withAllow)
                                {
                                    <span style="color:red;background-color:red;">&nbsp&nbsp</span>
                                    <span>&nbsp</span>
                                }
                                else
                                {
                                    <span style="color:red;background-color:red;">&nbsp</span>
                                    <span style="color:green;background-color:green;">&nbsp</span>
                                    <span>&nbsp</span>
                                }
                            }
                        }
                    }

                    <span style="color:white;background-color:blue;">@context.BuildNodeRepresentation()</span>
                    @context.GetIdentifier()
                    @if (Program.withPolicy && getPolicy != "")
                    {
                        <span style="color:blue">&nbsp @getPolicy</span>
                    }

                    <span style="color:blue;font-size:14px">@context.GetSymbolicRepresentation()</span>
                    <span style="color:lightgray;font-size:14px">@context.GetTimeStamp()</span>
                }
            </TitleTemplate>
        </Tree>
    </div>
    <div class="col-7" style="border-width: 3px; border-style: solid; border-color: blue; border-radius: 8px; position: sticky; background-color:aliceblue;">
        <div class="sticky-top" style="word-wrap:break-word;word-break:break-all;">
            @{
                if (SelectedNode != null)
                {
                    if (!(SelectedNode.Tag is string))
                    {
                        <span style="color:white;background-color:blue;" id="SelectedNodeInfoType">@SelectedNode.BuildNodeRepresentation()</span>
                        <span id="SelectedNodeInfoId">@SelectedNode.GetIdentifier()</span>
                        <br>
                    }
                    else
                    {
                        if (SelectedNode.Tag is string && SelectedNode.Text.Contains("/readme"))
                        {
                            var text = System.IO.File.ReadAllText(SelectedNode.Text);
                            text = text.Replace("%BLAZOR%", Program.externalBlazor);
                            if (text.Contains("%ACCESSRULES%"))
                            {
                                var accessRules = SecService.GetSecurityRules();
                                <table class="table table-bordered table-sm">
                                    <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th nowrap>Kind</th>
                                        <th>Permission</th>
                                        <th>Type</th>
                                        <th>API</th>
                                        <th>Path</th>
                                        <th>SemanticID</th>
                                        <th>See</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @{
                                        var lines = accessRules.Split('\n');
                                        foreach (var l in lines)
                                        {
                                            <tr>
                                                @{
                                                    var cols = l.Split('\t');
                                                    for (var c = 0; c < cols.Count(); c++)
                                                    {
                                                        if (c != 1 && c != 2)
                                                        {
                                                            <td>@cols[c]</td>
                                                        }
                                                        else
                                                        {
                                                            <td nowrap>@cols[c]</td>
                                                        }
                                                    }
                                                }
                                            </tr>
                                        }
                                    }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <span>@((MarkupString) text)</span>
                            }
                        }
                    }
                }

                for (var line = 0; line < 20; line++)
                {
                    var nodeDetails0 = ViewNodeDetails(SelectedNode, line, 0);
                    var nodeDetails1 = ViewNodeDetails(SelectedNode, line, 1);
                    var nodeDetails2 = ViewNodeDetails(SelectedNode, line, 2);
                    if (nodeDetails0 != "" && nodeDetails1 != "")
                    {
                        var detailsId = "SelectedNodeDetailsLeft_" + line;
                        <span style="color:white;background-color:blue;" id="@detailsId">@nodeDetails0</span>
                        detailsId = "SelectedNodeDetailsRight_" + line;
                        <span id="@detailsId">&nbsp;@nodeDetails1 @nodeDetails2</span>
                        <br>
                    }
                }

                if (SelectedNode != null && SelectedNode.Tag is IReferable r)
                {
                    <span style="color:lightgray;">UPDATE @r.TimeStamp.ToString("yy-MM-dd HH:mm:ss.fff")</span>
                    <br/>
                    <button style="border-width: 1px; border-color: black; background-color: lightgray" @onclick="setTimeStamp">TIMESTAMP</button>
                    <br/>
                    <span style="color:lightgray;">CREATE @r.TimeStampCreate.ToString("yy-MM-dd HH:mm:ss.fff")</span>
                    <br/>
                    <span style="color:lightgray;">TREE @r.TimeStampTree.ToString("yy-MM-dd HH:mm:ss.fff")</span>

                    <br/>
                    @code {

                        private void setTimeStamp()
                        {
                            (SelectedNode.Tag as IReferable).SetTimeStamp(DateTime.UtcNow);
                            Program.env[SelectedNode.EnvironmentIndex].setWrite(true);
                        }

                    }
                }

                var externalLink = false;
                //var link = AasxItemLinkService.Create(SelectedNode, NavigationManager.Uri, out externalLink); TODO: fix this before PR
                var link = "https://example.com";
                if (SelectedNode != null && link != "")
                {
                    if (true)
                    {
                        <a href="@link" target="_blank">@link</a>
                        <br>
                    }
                    else
                    {
                        <button onclick="window.location.href = '@link'; ">Download</button>
                        <br>
                    }

                    if (SelectedNode != null && SelectedNode.Tag is Submodel && Program.connectServer != "")
                    {
                        var toPublish = Program.submodelsToPublish.Contains(SelectedNode.Tag);
                        var toSubscribe = Program.submodelsToSubscribe.Contains(SelectedNode.Tag);
                        if (toPublish)
                        {
                            <button style="color:white;background-color:blue" @onclick="resetSubmodelToPublish">Publish</button>
                        }
                        else
                        {
                            <button @onclick="setSubmodelToPublish">Publish</button>
                        }

                        if (toSubscribe)
                        {
                            <button style="color:white;background-color:blue" @onclick="resetSubmodelToSubscribe">Subscribe</button>
                        }
                        else
                        {
                            <button @onclick="setSubmodelToSubscribe">Subscribe</button>
                        }
                        @code {

                            private void resetSubmodelToPublish()
                            {
                                Program.submodelsToPublish.Remove(SelectedNode.Tag);
                            }

                            private void setSubmodelToPublish()
                            {
                                var toSubscribe = Program.submodelsToSubscribe.Contains(SelectedNode.Tag);
                                if (!toSubscribe)
                                    Program.submodelsToPublish.Add(SelectedNode.Tag);
                            }

                            private void resetSubmodelToSubscribe()
                            {
                                Program.submodelsToSubscribe.Remove(SelectedNode.Tag);
                            }

                            private void setSubmodelToSubscribe()
                            {
                                var toPublish = Program.submodelsToPublish.Contains(SelectedNode.Tag);
                                if (!toPublish)
                                    Program.submodelsToSubscribe.Add(SelectedNode.Tag);
                            }

                        }
                    }
                }

                if (SelectedNode != null && SelectedNode.Tag is Property && Program.edit)
                {
                    <input @bind="CurrentValue" style="width:500px; border-width: 1px; border-color: black;"/>
                    <span style="border-width: 1px; border-color: black; background-color: blue;">@CurrentValue</span>
                    <br>
                    @code { private string CurrentValue { get; set; } }
                    if (CurrentValue != null && CurrentValue != "")
                    {
                        if (SelectedNode.Tag is Property)
                        {
                            if (CurrentValue == " ")
                                CurrentValue = "";
                            (SelectedNode.Tag as Property).Value = CurrentValue;
                            (SelectedNode.Tag as Property).SetTimeStamp(DateTime.UtcNow);
                            Program.env[SelectedNode.EnvironmentIndex].setWrite(true);
                            Program.signalNewData(0);
                        }

                        CurrentValue = "";
                    }
                }

                if (SelectedNode != null && (SelectedNode.Tag is AssetAdministrationShell || SelectedNode.Tag is AasCore.Aas3_0.File))
                {
                    if (SelectedNode.Tag is AssetAdministrationShell)
                    {
                        <button style="border-width: 1px; border-color: black; color: white; background-color: blue" @onclick="runCreateQRCodeImage">QRCODE</button>
                        <br/>
                        var qrCodeService = new QrCodeService();
                        var qrcodeLink = QrCodeService.GetQrCodeLink(SelectedNode);
                        if (Program.generatedQrCodes.ContainsKey(SelectedNode.Tag))
                        {
                            var qrcodeImage = QrCodeService.GetQrCodeImage(SelectedNode);
                            if (qrcodeImage != "")
                            {
                                <a href="@qrcodeLink" target="_blank">
                                    <div>
                                        <img src=data:image;base64,@qrcodeImage style="max-width: 25%;" alt="Qrcode Image"/>
                                    </div>
                                </a>
                            }
                        }
                        else
                        {
                            <a href="@qrcodeLink" target="_blank">@qrcodeLink</a>
                            <br>
                        }
                        @code {

                            private void runCreateQRCodeImage()
                            {
                                var qrCodeService = new QrCodeService();
                                qrCodeService.CreateQrCodeImage(SelectedNode);
                            }

                        }
                    }
                }

                if (SelectedNode != null && SelectedNode.Tag is Submodel sm)
                {
                    var idEncoded = Base64UrlEncoder.Encode(sm.Id);
                    var path = Program.externalBlazor + "/submodels/" + idEncoded;
                    <span style="color:white;background-color:blue;">URL:</span>
                    <span>&nbsp</span>
                    <a href="@path" target="_blank">@path</a>
                    <br>
                }

                if (SelectedNode != null && SelectedNode.Tag is ISubmodelElement sme)
                {
                    var path = sme.IdShort;
                    var parent = sme.Parent as IReferable;
                    while (parent is not Submodel)
                    {
                        if (parent is ISubmodelElementList parentList)
                        {
                            if (path.Equals(sme.IdShort))
                            {
                                var index = parentList.Value?.IndexOf(sme);
                                path = "[" + index + "]";
                            }

                            path = parentList.IdShort + path;
                        }
                        else if (parent.Parent is ISubmodelElementList prevParentList)
                        {
                            var index = prevParentList.Value?.IndexOf(parent as ISubmodelElement);
                            path = "[" + index + "]" + "." + path;
                        }
                        else
                        {
                            path = parent.IdShort + "." + path;
                        }

                        parent = (IReferable) parent.Parent;
                    }

                    var idEncoded = Base64UrlEncoder.Encode((parent as Submodel).Id);
                    path = Program.externalBlazor + "/submodels/" + idEncoded + "/submodel-elements/" + path;
                    <span style="color:white;background-color:blue;">URL:</span>
                    <span>&nbsp</span>
                    <a href="@path" target="_blank">@path</a>
                    <br>
                }

                if (SelectedNode != null && SelectedNode.Tag is SubmodelElementCollection smc)
                {
                    var semanticId = "";

                    try
                    {
                        semanticId = smc.SemanticId?.GetAsIdentifier();
                    }
                    catch
                    {
                    }

                    if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeries/1/0" ||
                        semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
                    {
                        var diff = smc.TimeStamp - timeStampPlot;

                        if (smc != collectionPlot || diff.TotalSeconds < 0 || diff.TotalSeconds >= 5)
                        {
                            watchTimeToProcessImage = System.Diagnostics.Stopwatch.StartNew();

                            collectionPlot = smc;
                            timeStampPlot = smc.TimeStampTree;

                            _timeSeriesData.Clear();

                            // make initial data for time series
                            var tsd = new TimeSeriesData() {SourceTimeSeries = smc};
                            _timeSeriesData.Add(tsd);

                            // plot arguments for time series
                            tsd.Args = PlotArguments.Parse(smc.FindQualifierOfType("TimeSeries.Args")?.Value);

                            // TODO: info - ZveiTimeSeriesDataV10 is currently hardcoded as JSON string in code
                            var pcts = ZveiTimeSeriesDataV10.Static;

                            var tssReferenceKey = new Key(KeyTypes.ConceptDescription, "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0");

                            // is it a segment
                            if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
                            {
                                TimeSeriesAddSegmentData(pcts, tsd, smc);
                            }
                            else
                            {
                                // search for segements on current level
                                var smcAllValues = smc.Value.FindAllSemanticIdAs<SubmodelElementCollection>(tssReferenceKey, MatchMode.Relaxed);

                                if (smcAllValues.Count() != 0)
                                {
                                    foreach (var smcseg in smcAllValues)
                                    {
                                        TimeSeriesAddSegmentData(pcts, tsd, smcseg);
                                    }
                                }
                            }

                            _timeSeriesData?.RenderTimeSeries(defPlotHeight: 200, "en", bi.sessionNumber, plotFilter.CombinedStartDateTime, plotFilter.CombinedEndDateTime);
                            watchTimeToProcessImage.Stop();
                        }

                        byte[] imageArray;
                        var timeSeriesImageBase64 = "";
                        var scottplotImgPath = "wwwroot/images/scottplot/smc_timeseries_clientid" + bi.sessionNumber + ".png";

                        if (System.IO.File.Exists(scottplotImgPath))
                        {
                            imageArray = System.IO.File.ReadAllBytes(scottplotImgPath);
                            timeSeriesImageBase64 = Convert.ToBase64String(imageArray);
                        }

                        var elapsedMsToProcessImage = watchTimeToProcessImage.ElapsedMilliseconds;

                        if (System.IO.File.Exists(scottplotImgPath))
                        {
                            <EditForm Model="@plotFilter" OnValidSubmit="() => plotFilter.ApplyFilterToTimeSeriesData(_timeSeriesData, bi.sessionNumber)">
                                <label for="filterFromDate">Filter from</label>
                                <InputDate id="filterFromDate" @bind-Value="plotFilter.StartDate"/>
                                <input type="time" @bind-value="plotFilter.StartTime"/>
                                <label for="filterToDate">Filter to</label>
                                <InputDate id="filterToDate" @bind-Value="plotFilter.EndDate"/>
                                <input type="time" @bind-value="plotFilter.EndTime"/>
                                <div>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            type="submit">
                                        Apply
                                    </button>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            @onclick="plotFilter.SetInitialFilterState">
                                        Reset
                                    </button>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            @onclick="() => { plotFilterTsdOffset = 0; plotFilter.SetFilterStateForDay(0); }">
                                        Today
                                    </button>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            @onclick="() => { plotFilterTsdOffset = -1; plotFilter.SetFilterStateForDay(-1); }">
                                        Yesterday
                                    </button>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            @onclick="() => plotFilter.SetFilterStateForDay(--plotFilterTsdOffset)">
                                        Prev day
                                    </button>
                                    <button style="border-width: 1px; border-color: black; background-color: lightgray"
                                            @onclick="() => plotFilter.SetFilterStateForDay(++plotFilterTsdOffset)">
                                        Next day
                                    </button>
                                </div>
                            </EditForm>

                            <div class="d-flex flex-column">
                                <img @onclick="() => showImageModal = !showImageModal" src=data:image;base64,@timeSeriesImageBase64 alt="Visualization of time series" style="max-width:950px;cursor:zoom-in;"/>
                                <span class="text-muted" style="font-size:14px;">
                                    Image processing took @elapsedMsToProcessImage ms (Last update: @timeStampPlot.ToString("yy-MM-dd HH:mm:ss.fff"))
                                </span>
                            </div>

                            <div class="modal modal-fullscreen @(showImageModal ? " d-block" : "d-none")" style="margin-top:3.5rem;" tabindex="-1">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Visualization of time series</h5>
                                            <button type="button" @onclick="() => showImageModal = !showImageModal" class="close" data-dismiss="modal" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body text-center">
                                            <img @onclick="() => showImageModal = !showImageModal" src=data:image;base64,@timeSeriesImageBase64 alt="Visualization of time series" style="max-width:90%;max-height:90%;cursor:zoom-out;" class="mb-2"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="my-2">Rendering time series...</div>
                        }
                    }
                    else
                    {
                        collectionPlot = null;
                    }
                }
            }

            @{
                bool svg;
                bool url;
                var detailsImage = createDetailsImage(SelectedNode, out url, out svg);
                if (detailsImage != "")
                {
                    if (!svg)
                    {
                        if (!url)
                        {
                            <br/>
                            <div>
                                <img src=data:image;base64,@detailsImage style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                        else
                        {
                            <br/>
                            <div>
                                <img src="@detailsImage" style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                    }
                    else
                    {
                        if (!url)
                        {
                            <br/>
                            <div>
                                <img src=data:image/svg+xml;base64,@detailsImage style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                        else
                        {
                            <br/>
                            <div>
                                <img src="detailsImage" style="max-width: 50%" alt="Details Image"/>
                            </div>
                        }
                    }
                }

                if (SelectedNode != null && (SelectedNode.Tag is BasicEventElement be))
                {
                    if (be.Observed != null)
                    {
                        var okey = be.Observed.GetAsExactlyOneKey().ToStringExtended();
                        <span style="color:white;background-color:blue;">Observed</span>
                        <span>@(" " + okey)</span>
                        <br/>
                        var refsme = Program.env[0].AasEnv.FindReferableByReference(be.Observed);
                        if (refsme != null)
                        {
                            <span style="color:lightgray;">UPDATE @refsme.TimeStamp.ToString("yy-MM-dd HH:mm:ss.fff")</span>
                            <br/>
                            <span style="color:lightgray;">CREATE @refsme.TimeStampCreate.ToString("yy-MM-dd HH:mm:ss.fff")</span>
                            <br/>
                        }
                        else
                        {
                            <span>Referenced element does not exist!</span>
                            <br/>
                        }
                    }
                }
            }
        </div>
    </div>
</div>


@inject IJSRuntime js
@inject BlazorSessionService bi;
@using AasxServer;
@using AdminShellNS;
@using System.Globalization;
@using System.Reflection;
@using AasxServerBlazor.DateTimeServices
@using AasxServerBlazor.TreeVisualisation
@using AasxServerBlazor.WebActions
@using AasxServerBlazor.WebActions.AasxLinkCreation
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using ScottPlot;

@code {
    System.Diagnostics.Stopwatch watchTimeToProcessImage = new();
    DateTime timeStampPlot = new();
    PlotFilter plotFilter = new(new SystemDateTimeProvider());
    SubmodelElementCollection collectionPlot = null;
    bool showImageModal = false;
    ListOfTimeSeriesData _timeSeriesData = new();
    int plotFilterTsdOffset = 0;

    List<TreeItem> Items = null;

    IList<TreeItem> ExpandedNodes = new List<TreeItem>();

    private TreeItem SelectedNode { get; set; }

    static ulong dataVersion = 0;

    static int hack = 0;

    System.Threading.Timer refresh = null;

    protected override void OnInitialized()
    {
        SubmodelService.NewDataAvailable += NewData;
        Program.signalNewData(1);
    }

    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }

    int newDataMode = 0;

    void NewData(object source, EventArgs args)
    {
        if (Program.isLoading)
            return;

        if (newDataMode != 0 || args is not Program.NewDataAvailableArgs newArgs)
        {
            return;
        }

        newDataMode = newArgs.signalNewDataMode;
        InvokeAsync(() => StateHasChanged());
    }

    bool update = true;

    string updateVisibleTree(List<TreeItem> viewItems, TreeItem selectedNode)
    {
        if (update)
        {
            switch (newDataMode)
            {
                // 0 == same tree, only values changed
                case 0:
                    break;
                // 1 == same tree, structure may change
                // 2 == build new tree, keep open nodes
                case 1:
                case 2:
                    var isSelected = selectedNode != null;
                    var isExpanded = ExpandedNodes.Count != 0;
                    var expandedNodesPath = new List<string>[ExpandedNodes.Count + 1];
                    var selectedNodePath = getPath(selectedNode);
                    if (isExpanded)
                    {
                        for (var j = 0; j < ExpandedNodes.Count; j++)
                        {
                            expandedNodesPath[j] = getPath(ExpandedNodes[j]);
                        }
                    }

                    SubmodelService.buildTree();
                    Items = SubmodelService.GetTree(selectedNode, ExpandedNodes);
                    ExpandedNodes.Clear();
                    selectedNode = null;
                    if (isSelected)
                    {
                        selectedNode = findPath(selectedNodePath);
                    }

                    if (isExpanded)
                    {
                        foreach (var path in expandedNodesPath)
                        {
                            var p = findPath(path);
                            if (p != null)
                                ExpandedNodes.Add(p);
                        }
                    }

                    newDataMode = 0;
                    break;
                // 3 == build new tree, all nodes closed
                case 3:
                    SubmodelService.buildTree();
                    Items = SubmodelService.GetTree(selectedNode, ExpandedNodes);
                    ExpandedNodes.Clear();
                    selectedNode = null;
                    newDataMode = 0;
                    break;
            }

            SelectedNode = selectedNode;
        }

        return "";
    }

    //TODO: Extract to TreeItem
    List<string> getPath(TreeItem i)
    {
        if (i == null)
            return null;

        var upPath = new List<string> {i.Text};
        while (i.Parent != null)
        {
            i = (TreeItem) i.Parent;
            upPath.Add(i.Text);
        }

        var downPath = new List<string>();
        var j = upPath.Count - 1;
        while (j >= 0)
        {
            downPath.Add(upPath[j--]);
        }

        return downPath;
    }

    TreeItem findPath(List<string> path)
    {
        if (path != null && path.Count > 0)
        {
            TreeItem found = null;
            int k = 0;
            while (k < Items.Count)
            {
                var i = Items[k];
                if (i.Text != path[0])
                {
                    k++;
                    continue;
                }

                var j = 0;
                found = i;
                while (++j < path.Count)
                {
                    if (i.Childs != null)
                    {
                        found = null;
                        foreach (var c in i.Childs)
                        {
                            if (c.Text == path[j])
                            {
                                found = c;
                                break;
                            }
                        }
                    }

                    if (found == null)
                    {
                        return null;
                    }

                    i = found;
                }

                if (found != null)
                    return found;
            }
        }

        return null;
    }
    

    public static string createDetailsImage(TreeItem treeItem, out bool url, out bool svg)
    {
        svg = false;
        url = false;

        if (treeItem == null)
        {
            return "";
        }

        var o = treeItem.Tag;

        if (o is AssetAdministrationShell)
        {
            var aas = o as AssetAdministrationShell;
            lock (Program.changeAasxFile)
            {
                try
                {
                    {
                        if (Program.env[treeItem.EnvironmentIndex] == null)
                            return "";

                        using (System.IO.Stream s = Program.env[treeItem.EnvironmentIndex].GetLocalThumbnailStream())
                        {
                            if (s != null)
                            {
                                using (var m = new System.IO.MemoryStream())
                                {
                                    s.CopyTo(m);
                                    return System.Convert.ToBase64String(m.ToArray());
                                }
                            }
                        }
                    }
                }
                catch
                {
                }
            }
        }

        if (o is AasCore.Aas3_0.File f)
        {
            // Test for /aasx/
            if (!string.IsNullOrEmpty(f.Value))
            {
                var split = f.Value.Split(new Char[] {'/'});
                if (split.Length == 2 || split.Length > 1 && split[1].ToLower() == "aasx")
                {
                    split = f.Value.Split(new Char[] {'.'});
                    switch (split.Last().ToLower())
                    {
                        case "jpg":
                        case "bmp":
                        case "png":
                        case "svg":
                            try
                            {
                                using (Stream s = Program.env[treeItem.EnvironmentIndex].GetLocalStreamFromPackage(f.Value))
                                {
                                    if (s != null)
                                    {
                                        using (var m = new MemoryStream())
                                        {
                                            if (split.Last().ToLower() == "svg")
                                            {
                                                svg = true;
                                            }

                                            s.CopyTo(m);
                                            return System.Convert.ToBase64String(m.ToArray());
                                        }
                                    }
                                }
                            }
                            catch
                            {
                            }

                            break;
                    }
                }
                else
                {
                    url = true;
                    return f.Value;
                }
            }
        }

        return "";
    }

    string ViewNodeDetails(TreeItem treeItem, int line, int col)
    {
        if (treeItem == null)
        {
            return "";
        }

        var ret = "";

        var o = treeItem.Tag;

        if (o == null)
        {
            return "";
        }

        if (o is AssetAdministrationShell)
        {
            string subjectIssuer = null;

            ret = "";
            var aas = o as AssetAdministrationShell;

            var asset = aas.AssetInformation;

            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "ID";
                    if (col == 1)
                        ret = aas.Id + "";
                    if (col == 2)
                        ret = " ==> " + Base64UrlEncoder.Encode(aas.Id) + "";
                    break;
                case 1:
                    if (asset != null)
                    {
                        if (col == 0)
                            ret = "ASSET";
                        if (col == 1)
                            ret = asset.GlobalAssetId;
                    }

                    break;
                case 2:
                    if (asset != null)
                    {
                        if (col == 0)
                            ret = "ASSETID";
                        if (col == 1)
                            ret = asset.GlobalAssetId + "";
                        if (col == 2)
                            if (asset.GlobalAssetId != null)
                            {
                                ret = " ==> " + Base64UrlEncoder.Encode(asset.GlobalAssetId) + "";
                            }
                    }

                    break;
                case 3:
                    if (asset != null)
                    {
                        if (col == 0)
                            ret = "ASSETID URLENCODED";
                        if (col == 1)
                        {
                            string url = WebUtility.UrlEncode(asset.GlobalAssetId);
                            ret = url;
                        }
                    }

                    break;
                case 4:
                    if (aas.Extensions != null)
                    {
                        if (col == 0)
                            ret = "Extensions";
                        if (col == 1)
                        {
                            ret = "";
                            foreach (var e in aas.Extensions)
                            {
                                ret += e.Name + " : " + e.Value + "; ";
                            }
                        }
                    }

                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        if (o is Submodel)
        {
            var sm = o as Submodel;
            ret = "";
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "ID";
                    if (col == 1)
                        ret = sm.Id + "";
                    if (col == 2)
                        ret = " ==> " + Base64UrlEncoder.Encode(sm.Id) + "";
                    break;
                case 1:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = sm.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 2:
                    ret = getQualifiers(sm.Qualifiers, col);
                    break;
                case 3:
                    if (sm.Extensions != null)
                    {
                        if (col == 0)
                            ret = "Extensions";
                        if (col == 1)
                        {
                            ret = "";
                            foreach (var e in sm.Extensions)
                            {
                                ret += e.Name + " : " + e.Value + "; ";
                            }
                        }
                    }

                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        if (o is Property)
        {
            var prop = o as Property;
            ret = "";
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = prop.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 1:
                    if (col == 0)
                        ret = "Value Type";
                    if (col == 1)
                        ret = prop.ValueType + "";
                    break;
                case 2:
                    if (col == 0)
                        ret = "Value";
                    if (col == 1)
                        ret = prop.Value + "";
                    break;
                case 3:
                    ret = getQualifiers(prop.Qualifiers, col);
                    break;
                case 4:
                    if (col == 0)
                        ret = getUnit(treeItem, prop, col);
                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        if (o is Entity)
        {
            var e = o as Entity;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = e.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 1:
                    if (col == 0)
                        ret = "Entity Type";
                    if (col == 1)
                        ret = e.EntityType + "";
                    break;
                case 2:
                    ret = "";
                    if (e.EntityType == EntityType.SelfManagedEntity)
                    {
                        if (e.GlobalAssetId != null)
                        {
                            if (col == 0)
                                ret = "Asset";
                            if (col == 1)
                            {
                                var k = e.GlobalAssetId;
                            }
                        }

                        if (e.SpecificAssetIds != null)
                        {
                            if (col == 0)
                                ret = "Asset";
                            if (col == 1)
                            {
                                foreach (var specificAssetId in e.SpecificAssetIds)
                                {
                                    var k = specificAssetId.Value;
                                    if (!string.IsNullOrEmpty(k))
                                    {
                                        ret = "[" + k + "]";
                                    }
                                }
                            }
                        }
                    }

                    break;
                case 3:
                    ret = getQualifiers(e.Qualifiers, col);
                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        if (o is AasCore.Aas3_0.File f)
        {
            ret += ", " + f.Value;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = f.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 1:
                    if (col == 0)
                        ret = "Value";
                    if (col == 1)
                        ret = f.Value;
                    break;
                case 2:
                    ret = getQualifiers(f.Qualifiers, col);
                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        if (o is Blob b)
        {
            ret = "";
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = b.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 1:
                    if (col == 0)
                        ret = "ContentType";
                    if (col == 1)
                        ret = b.ContentType;
                    break;
                case 2:
                    if (col == 0)
                        ret = "Value";
                    if (col == 1)
                        ret = System.Text.Encoding.ASCII.GetString(b.Value);
                    break;
                case 3:
                    ret = getQualifiers(b.Qualifiers, col);
                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        if (o is AasCore.Aas3_0.Range)
        {
            var r = o as AasCore.Aas3_0.Range;
            ret = r.IdShort;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 1:
                    if (col == 0)
                        ret = "Min";
                    if (col == 1)
                        ret = r.Min + "";
                    break;
                case 2:
                    if (col == 0)
                        ret = "Max";
                    if (col == 1)
                        ret = r.Max + "";
                    break;
                case 3:
                    ret = getQualifiers(r.Qualifiers, col);
                    break;
                case 4:
                    if (col == 0)
                        ret = getUnit(treeItem, r, col);
                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        if (o is Operation)
        {
            var op = o as Operation;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = op.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 1:
                    if (col == 0)
                        ret = "CountInputs";
                    if (col == 1)
                    {
                        ret = "0";
                        if (op.InputVariables != null)
                        {
                            ret = op.InputVariables.Count + "";
                        }
                    }

                    break;
                case 2:
                    if (col == 0)
                        ret = "CountOutputs";
                    if (col == 1)
                    {
                        ret = "0";
                        if (op.OutputVariables != null)
                        {
                            ret = op.OutputVariables.Count + "";
                        }
                    }

                    break;
                case 3:
                    ret = getQualifiers(op.Qualifiers, col);
                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        if (o is AnnotatedRelationshipElement)
        {
            var r = o as AnnotatedRelationshipElement;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 1:
                    if (col == 0)
                        ret = "First";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.First;
                        if (k != null)
                        {
                            ret = k.Keys.ToStringExtended();
                        }
                    }

                    break;
                case 2:
                    if (col == 0)
                        ret = "Second";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.Second;
                        if (k != null)
                        {
                            ret = k.Keys.ToStringExtended();
                        }
                    }

                    break;
                case 3:
                    if (col == 0)
                        ret = getQualifiers(r.Qualifiers, col);
                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        if (o is RelationshipElement)
        {
            var r = o as RelationshipElement;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 1:
                    if (col == 0)
                        ret = "First";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.First;
                        if (k != null)
                        {
                            ret = k.Keys.ToStringExtended();
                        }
                    }

                    break;
                case 2:
                    if (col == 0)
                        ret = "Second";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.Second;
                        if (k != null)
                        {
                            ret = k.Keys.ToStringExtended();
                        }
                    }

                    break;
                case 3:
                    ret = getQualifiers(r.Qualifiers, col);
                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        if (o is ReferenceElement)
        {
            var r = o as ReferenceElement;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 1:
                    if (col == 0)
                        ret = "Value";
                    if (col == 1)
                    {
                        ret = "NULL";
                        if (r.Value != null)
                        {
                            var k = r.Value.Keys;
                            if (k != null)
                            {
                                ret = k.ToStringExtended();
                            }
                        }
                    }

                    break;
                case 2:
                    ret = getQualifiers(r.Qualifiers, col);
                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            var ls = mlp.Value;
            for (var i = 0; i < ls.Count; i++)
            {
                ret += ls[i].Language + " ";
            }

            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = mlp.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 1:
                    ret = getQualifiers(mlp.Qualifiers, col);
                    break;
                default:
                    ret = "";
                    if (ls.Count > line - 2)
                    {
                        if (col == 0)
                            ret = ls[line - 2].Language;
                        if (col == 1)
                            ret = ls[line - 2].Text + "";
                    }

                    break;
            }

            return ret;
        }

        if (o is ISubmodelElement)
        {
            var sme = o as ISubmodelElement;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = sme.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = $"[{k.Type}, {k.Value}]";
                        }
                    }

                    break;
                case 1:
                    ret = getQualifiers(sme.Qualifiers, col);
                    break;
                default:
                    ret = "";
                    break;
            }

            return ret;
        }

        return (ret);
    }

    static string getQualifiers(List<IQualifier> q, int col)
    {
        string ret = "";

        if (q != null && q.Count > 0)
        {
            if (col == 0)
                ret = "Qualifiers";
            if (col == 1)
            {
                ret = "";
                for (var i = 0; i < q.Count; i++)
                {
                    if (i != 0)
                        ret += ", ";
                    if (q[i].Type != null && q[i].Type != "")
                    {
                        ret += q[i].Type + " ";
                    }

                    if (q[i].Value != null && q[i].Value != "")
                    {
                        ret += "= " + q[i].Value;
                    }
                }
            }
        }

        return ret;
    }

    public string getUnit(TreeItem treeItem, ISubmodelElement se, int col)
    {
        var ret = "";
        if (se.SemanticId == null || se.SemanticId.Keys != null || se.SemanticId.Keys.Count != 0)
        {
            return ret;
        }

        return ret;
    }

}

<style>
.modal-fullscreen {
  padding: 0 !important;
}
.modal-fullscreen .modal-dialog {
  width: 100%;
  max-width: none;
  height: 100%;
  margin: 0;
}
.modal-fullscreen .modal-content {
  height: 100%;
  border: 0;
  border-radius: 0;
}
.modal-fullscreen .modal-body {
  overflow-y: auto;
}
</style>