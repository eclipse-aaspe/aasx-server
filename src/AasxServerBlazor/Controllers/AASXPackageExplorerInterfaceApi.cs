/*
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: Final-Draft
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using AasxRestServerLibrary;
using AdminShellNS;
using IO.Swagger.Attributes;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Dynamic;
using System.IO;
using System.Net;

namespace IO.Swagger.Controllers
{
    //[Authorize]
    [ApiController]
    public class AASXPackageExplorerInterfaceApiController : ControllerBase
    {
        private AasxHttpContextHelper _helper = new AasxHttpContextHelper();

        public AASXPackageExplorerInterfaceApiController()
        {
            _helper.Packages = AasxServer.Program.env.ToArray();
        }

        [HttpGet]
        [Route("/server/listaas")]
        [ValidateModelState]
        public virtual IActionResult ListAAS()
        {
            ExpandoObject result = _helper.EvalGetListAAS(HttpContext);
            return new JsonResult(result) { StatusCode = (int)HttpStatusCode.OK };
        }

        [HttpGet]
        [Route("/server/getaasx/{id}")]
        [ValidateModelState]
        public virtual IActionResult GetAASX([FromRoute][Required] int id)
        {
            Stream fileStream = _helper.EvalGetAASX(HttpContext, id);
            if (fileStream != null)
            {
                return new FileStreamResult(fileStream, "application/octet-stream");
            }
            else
            {
                return new StatusCodeResult((int)HttpStatusCode.Unauthorized);
            }
        }

        [HttpGet]
        [Route("/aas/{id}/core")]
        [ValidateModelState]
        public virtual IActionResult GetAASInfo([FromRoute][Required] int id)
        {
            ExpandoObject result = _helper.EvalGetAasAndAsset(HttpContext, id.ToString());

            JsonSerializerSettings settings = new JsonSerializerSettings();
            settings.ContractResolver = new AdminShellConverters.AdaptiveFilterContractResolver(false, false);
            return new JsonResult(result, settings) { StatusCode = (int)HttpStatusCode.OK };
        }
    }
}
